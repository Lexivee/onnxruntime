# --------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.
# --------------------------------------------------------------
# Build onnxruntime-gpu python package with CUDA 12.6 & CUDNN 9.4 for python 3.12 in Ubuntu 24.04 for Nvidia GPU.
# If memory is less than 64GB, you may change "--parallel" to "--parallel 4" to avoid out-of-memory error.

FROM nvcr.io/nvidia/cuda:12.6.1-devel-ubuntu24.04

# Target CUDA device with compute capability >= 6.1
ARG CMAKE_CUDA_ARCHITECTURES="61;70;75;80;86;90"

ENV DEBIAN_FRONTEND=noninteractive
MAINTAINER Changming Sun "chasun@microsoft.com"

# Add source code to /code
ADD . /code

ENV PATH=/usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}

# Install required packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    g++ \
    gcc \
    make \
    git \
    cmake \
    wget \
    ninja-build \
    python3-pip \
    python3.12-dev \
    python3.12-venv \
    && rm -rf /var/lib/apt/lists/*

# Create a virtual environment and install dependencies
RUN cd /code \
    && python3 -m venv /code/env \
    && /code/env/bin/pip install --upgrade psutil setuptools wheel packaging \
    && /code/env/bin/pip install -r tools/ci_build/github/linux/docker/inference/x86_64/python/cpu/scripts/requirements.txt

# Install CUDNN 9.4.0.58 for building ONNX Runtime with CUDA.
RUN wget https://developer.download.nvidia.com/compute/cudnn/redist/cudnn/linux-x86_64/cudnn-linux-x86_64-9.4.0.58_cuda12-archive.tar.xz \
    && mkdir -p /code/build/cudnn \
    && tar -Jxvf cudnn-linux-x86_64-9.4.0.58_cuda12-archive.tar.xz -C /code/build/cudnn --strip=1

# Build ONNX Runtime with CUDA
RUN cd /code \
    && /code/env/bin/python /code/tools/ci_build/build.py --build_dir /code/build/Linux \
    --allow_running_as_root --skip_submodule_sync \
    --use_cuda --cuda_home /usr/local/cuda \
    --cudnn_home /code/build/cudnn \
    --build_shared_lib --skip_tests \
    --config Release --build_wheel --update --build --parallel \
    --cmake_generator Ninja \
    --enable_cuda_nhwc_ops \
    --cmake_extra_defines "CMAKE_CUDA_ARCHITECTURES=${CMAKE_CUDA_ARCHITECTURES}" onnxruntime_BUILD_UNIT_TESTS=OFF

# Start second stage to copy the build artifacts
FROM nvcr.io/nvidia/cuda:12.6.1-runtime-ubuntu24.04
ENV DEBIAN_FRONTEND=noninteractive

# Copy built wheel and license
COPY --from=0 /code/build/Linux/Release/dist /ort
COPY --from=0 /code/dockerfiles/LICENSE-IMAGE.txt /code/LICENSE-IMAGE.txt

# Install runtime dependencies
# Note that here we demostrate that we can install CUDNN from nvidia-cudnn-cu12 python package for runtime.
RUN apt-get update && apt-get install -y --no-install-recommends \
    libstdc++6 \
    ca-certificates \
    python3-pip \
    python3.12-venv \
    unattended-upgrades \
    && unattended-upgrade \
    && python3 -m venv /ort/env \
    && /ort/env/bin/pip install /ort/*.whl \
    && /ort/env/bin/pip install nvidia-cudnn-cu12==9.4.0.58 \
    && export site_packages="$(/ort/env/bin/python -c "import sysconfig; print(sysconfig.get_path('purelib'))")" \
    && export LD_LIBRARY_PATH="$site_packages/nvidia/cudnn/lib:$LD_LIBRARY_PATH" \
    && /ort/env/bin/python -c 'import onnxruntime; print(onnxruntime.get_available_providers())' \
    && rm -rf /ort/*.whl \
    && rm -rf /var/lib/apt/lists/*

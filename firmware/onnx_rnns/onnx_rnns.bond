import "CommonFunctions.bond"

namespace ONNX_RNN

struct VarAddress{
	// Var register address
	0: uint32 rfAddress;
	// Var dram address
	1: uint32 dramAddress;
	// Number of matrices
    2: uint32 numTiles;
	// Memory type to write to, MRF, DRAM, and so on
    3: ISA.Mem memType = Dram;
}

struct EvalRNNParams{
    // RNN time steps
    0: uint32 rnnSteps;

    // Whether to initialize LSTM history using a file
    1: uint32 initHist;

    // Whether to export the hidden layer at each time step
    2: uint32 exportHidden;
    
    [TensorDimension("")]
    3: uint32 inputDim;
    
    [TensorDimension("")]
    4: uint32 outputDim;
	
	// Variables address map
	5: vector<VarAddress> var_addr_map;
}

[Id("1601")]
[MajorVersion("2")]
[MinorVersion("0")]
service Functions : BS.CommonFunctions
{
    [TensorInputs("hist[outputDim][2 * initHist], inputVectors[inputDim][rnnSteps]")]
    [TensorOutputs("outputVector[outputDim][1 + exportHidden * (rnnSteps - 1)]")]
    [Id("51")] void EvaluateLstm(EvalRNNParams);

    [TensorInputs("hist[outputDim][1 * initHist], inputVectors[inputDim][rnnSteps]")]
    [TensorOutputs("outputVector[outputDim][1 + exportHidden * (rnnSteps - 1)]")]
    [Id("52")] void EvaluateGru(EvalRNNParams);
}


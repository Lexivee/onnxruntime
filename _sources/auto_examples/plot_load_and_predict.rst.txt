.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_plot_load_and_predict.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_load_and_predict.py:


.. _l-example-simple-usage:

Load and predict with ONNX Runtime and a very simple model
==========================================================

This example demonstrates how to load a model and compute
the output for an input vector. It also shows how to
retrieve the definition of its inputs and outputs.



.. code-block:: python


    import onnxruntime as rt
    import numpy
    from onnxruntime.datasets import get_example







Let's load a very simple model.
The model is available on github `onnx...test_sigmoid <https://github.com/onnx/onnx/tree/master/onnx/backend/test/data/node/test_sigmoid>`_.



.. code-block:: python


    example1 = get_example("sigmoid.onnx")
    sess = rt.InferenceSession(example1)







Let's see the input name and shape.



.. code-block:: python


    input_name = sess.get_inputs()[0].name
    print("input name", input_name)
    input_shape = sess.get_inputs()[0].shape
    print("input shape", input_shape)
    input_type = sess.get_inputs()[0].type
    print("input type", input_type)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    input name x
    input shape [3, 4, 5]
    input type tensor(float)


Let's see the output name and shape.



.. code-block:: python


    output_name = sess.get_outputs()[0].name
    print("output name", output_name)  
    output_shape = sess.get_outputs()[0].shape
    print("output shape", output_shape)
    output_type = sess.get_outputs()[0].type
    print("output type", output_type)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    output name y
    output shape [3, 4, 5]
    output type tensor(float)


Let's compute its outputs (or predictions if it is a machine learned model).



.. code-block:: python


    import numpy.random
    x = numpy.random.random((3,4,5))
    x = x.astype(numpy.float32)
    res = sess.run([output_name], {input_name: x})
    print(res)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [array([[[0.6676908 , 0.7009506 , 0.6141747 , 0.7027944 , 0.6506822 ],
            [0.72387254, 0.5750586 , 0.6904876 , 0.504182  , 0.6071942 ],
            [0.6076249 , 0.561518  , 0.6488042 , 0.6666458 , 0.6677609 ],
            [0.6741741 , 0.6829217 , 0.67064303, 0.51614106, 0.68888116]],

           [[0.63170385, 0.69706225, 0.5416979 , 0.5713598 , 0.6837601 ],
            [0.62581074, 0.6929711 , 0.5366643 , 0.6616976 , 0.6277815 ],
            [0.6335021 , 0.5437645 , 0.6403681 , 0.6338741 , 0.6531703 ],
            [0.6117884 , 0.52175605, 0.5227699 , 0.5239572 , 0.5814932 ]],

           [[0.5894185 , 0.65706766, 0.5266628 , 0.72641695, 0.51765215],
            [0.658286  , 0.5892907 , 0.6720866 , 0.6392181 , 0.7024544 ],
            [0.64596343, 0.6947161 , 0.7066432 , 0.62856233, 0.5016161 ],
            [0.6595205 , 0.638111  , 0.57310104, 0.5783218 , 0.68331295]]],
          dtype=float32)]


**Total running time of the script:** ( 0 minutes  0.013 seconds)


.. _sphx_glr_download_auto_examples_plot_load_and_predict.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_load_and_predict.py <plot_load_and_predict.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_load_and_predict.ipynb <plot_load_and_predict.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_

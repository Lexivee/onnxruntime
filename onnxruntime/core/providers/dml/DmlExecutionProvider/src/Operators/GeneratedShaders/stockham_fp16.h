#if 0
;
; Note: shader requires additional functionality:
;       Use native low precision
;
;
; Input signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
;
; Output signature:
;
; Name                 Index   Mask Register SysValue  Format   Used
; -------------------- ----- ------ -------- -------- ------- ------
; no parameters
; shader hash: f5620269e4063643486b24389b16d99d
;
; Pipeline Runtime Information: 
;
;
;
; Buffer Definitions:
;
; cbuffer 
; {
;
;   [128 x i8] (type annotation not present)
;
; }
;
; Resource bind info for 
; {
;
;   [2 x i8] (type annotation not present)
;
; }
;
; Resource bind info for 
; {
;
;   [2 x i8] (type annotation not present)
;
; }
;
; Resource bind info for 
; {
;
;   [2 x i8] (type annotation not present)
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
;                                   cbuffer      NA          NA     CB0            cb0     1
;                                       UAV  struct         r/w      U0             u0     1
;                                       UAV  struct         r/w      U1             u1     1
;                                       UAV  struct         r/w      U2             u2     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:8-i16:16-i32:32-i64:64-f16:16-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.f16 = type { half, half, half, half, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%"class.RWStructuredBuffer<half>" = type { half }
%Constants = type { i32, i32, i32, i32, <4 x i32>, <4 x i32>, <4 x i32>, <4 x i32>, <4 x i32>, <4 x i32>, i32, i32, float, i32 }

define void @DFT() {
  %1 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 2, i32 2, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %2 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 1, i32 1, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %3 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 1, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %4 = call %dx.types.Handle @dx.op.createHandle(i32 57, i8 2, i32 0, i32 0, i1 false)  ; CreateHandle(resourceClass,rangeId,index,nonUniformIndex)
  %5 = call i32 @dx.op.threadId.i32(i32 93, i32 0)  ; ThreadId(component)
  %6 = alloca [2 x float], align 4
  %7 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %4, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %8 = extractvalue %dx.types.CBufRet.i32 %7, 0
  %9 = add i32 %8, %5
  %10 = extractvalue %dx.types.CBufRet.i32 %7, 1
  %11 = icmp ult i32 %9, %10
  br i1 %11, label %12, label %198

; <label>:12                                      ; preds = %0
  %13 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %4, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %14 = extractvalue %dx.types.CBufRet.i32 %13, 3
  %15 = lshr i32 %14, 1
  %16 = extractvalue %dx.types.CBufRet.i32 %7, 2
  %17 = and i32 %16, 31
  %18 = shl i32 1, %17
  %19 = add i32 %16, 31
  %20 = and i32 %19, 31
  %21 = shl nuw i32 1, %20
  %22 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %4, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %23 = extractvalue %dx.types.CBufRet.i32 %22, 1
  %24 = extractvalue %dx.types.CBufRet.i32 %22, 2
  %25 = mul i32 %24, %23
  %26 = urem i32 %9, %25
  %27 = udiv i32 %9, %25
  %28 = udiv i32 %26, %24
  %29 = urem i32 %26, %24
  %30 = lshr i32 %28, %17
  %31 = shl i32 %30, %20
  %32 = add i32 %21, -1
  %33 = and i32 %28, %32
  %34 = add i32 %31, %33
  %35 = add i32 %34, %15
  %36 = extractvalue %dx.types.CBufRet.i32 %13, 0
  %37 = icmp eq i32 %36, 1
  %38 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %4, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %39 = extractvalue %dx.types.CBufRet.i32 %38, 2
  %40 = icmp ult i32 %34, %39
  %41 = and i1 %37, %40
  br i1 %41, label %42, label %57, !dx.controlflow.hints !14

; <label>:42                                      ; preds = %12
  %43 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %4, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %44 = extractvalue %dx.types.CBufRet.i32 %43, 2
  %45 = mul i32 %44, %34
  %46 = call %dx.types.ResRet.f16 @dx.op.rawBufferLoad.f16(i32 139, %dx.types.Handle %1, i32 %45, i32 0, i8 1, i32 2)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %47 = extractvalue %dx.types.ResRet.f16 %46, 0
  %48 = fpext half %47 to float
  %49 = extractvalue %dx.types.CBufRet.i32 %38, 3
  %50 = icmp eq i32 %49, 2
  br i1 %50, label %51, label %57, !dx.controlflow.hints !15

; <label>:51                                      ; preds = %42
  %52 = extractvalue %dx.types.CBufRet.i32 %43, 3
  %53 = add i32 %52, %45
  %54 = call %dx.types.ResRet.f16 @dx.op.rawBufferLoad.f16(i32 139, %dx.types.Handle %1, i32 %53, i32 0, i8 1, i32 2)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %55 = extractvalue %dx.types.ResRet.f16 %54, 0
  %56 = fpext half %55 to float
  br label %57

; <label>:57                                      ; preds = %51, %42, %12
  %58 = phi float [ %48, %51 ], [ %48, %42 ], [ 1.000000e+00, %12 ]
  %59 = phi float [ %56, %51 ], [ 0.000000e+00, %42 ], [ 0.000000e+00, %12 ]
  %60 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %4, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %61 = extractvalue %dx.types.CBufRet.i32 %60, 1
  %62 = icmp ult i32 %34, %61
  br i1 %62, label %63, label %84, !dx.controlflow.hints !16

; <label>:63                                      ; preds = %57
  %64 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %4, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %65 = extractvalue %dx.types.CBufRet.i32 %64, 0
  %66 = mul i32 %65, %27
  %67 = extractvalue %dx.types.CBufRet.i32 %64, 1
  %68 = mul i32 %67, %34
  %69 = add i32 %68, %66
  %70 = extractvalue %dx.types.CBufRet.i32 %64, 2
  %71 = mul i32 %70, %29
  %72 = add i32 %69, %71
  %73 = call %dx.types.ResRet.f16 @dx.op.rawBufferLoad.f16(i32 139, %dx.types.Handle %3, i32 %72, i32 0, i8 1, i32 2)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %74 = extractvalue %dx.types.ResRet.f16 %73, 0
  %75 = fpext half %74 to float
  %76 = extractvalue %dx.types.CBufRet.i32 %60, 3
  %77 = icmp eq i32 %76, 2
  br i1 %77, label %78, label %84, !dx.controlflow.hints !17

; <label>:78                                      ; preds = %63
  %79 = extractvalue %dx.types.CBufRet.i32 %64, 3
  %80 = add i32 %79, %72
  %81 = call %dx.types.ResRet.f16 @dx.op.rawBufferLoad.f16(i32 139, %dx.types.Handle %3, i32 %80, i32 0, i8 1, i32 2)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %82 = extractvalue %dx.types.ResRet.f16 %81, 0
  %83 = fpext half %82 to float
  br label %84

; <label>:84                                      ; preds = %78, %63, %57
  %85 = phi float [ %75, %78 ], [ %75, %63 ], [ 0.000000e+00, %57 ]
  %86 = phi float [ %83, %78 ], [ 0.000000e+00, %63 ], [ 0.000000e+00, %57 ]
  %87 = fmul fast float %85, %58
  %88 = fmul fast float %86, %59
  %89 = fmul fast float %85, %59
  %90 = fmul fast float %86, %58
  %91 = icmp ult i32 %35, %39
  %92 = and i1 %37, %91
  br i1 %92, label %93, label %108, !dx.controlflow.hints !14

; <label>:93                                      ; preds = %84
  %94 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %4, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %95 = extractvalue %dx.types.CBufRet.i32 %94, 2
  %96 = mul i32 %95, %35
  %97 = call %dx.types.ResRet.f16 @dx.op.rawBufferLoad.f16(i32 139, %dx.types.Handle %1, i32 %96, i32 0, i8 1, i32 2)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %98 = extractvalue %dx.types.ResRet.f16 %97, 0
  %99 = fpext half %98 to float
  %100 = extractvalue %dx.types.CBufRet.i32 %38, 3
  %101 = icmp eq i32 %100, 2
  br i1 %101, label %102, label %108, !dx.controlflow.hints !15

; <label>:102                                     ; preds = %93
  %103 = extractvalue %dx.types.CBufRet.i32 %94, 3
  %104 = add i32 %103, %96
  %105 = call %dx.types.ResRet.f16 @dx.op.rawBufferLoad.f16(i32 139, %dx.types.Handle %1, i32 %104, i32 0, i8 1, i32 2)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %106 = extractvalue %dx.types.ResRet.f16 %105, 0
  %107 = fpext half %106 to float
  br label %108

; <label>:108                                     ; preds = %102, %93, %84
  %109 = phi float [ %99, %102 ], [ %99, %93 ], [ 1.000000e+00, %84 ]
  %110 = phi float [ %107, %102 ], [ 0.000000e+00, %93 ], [ 0.000000e+00, %84 ]
  %111 = icmp ult i32 %35, %61
  br i1 %111, label %112, label %133, !dx.controlflow.hints !16

; <label>:112                                     ; preds = %108
  %113 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %4, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %114 = extractvalue %dx.types.CBufRet.i32 %113, 0
  %115 = mul i32 %114, %27
  %116 = extractvalue %dx.types.CBufRet.i32 %113, 1
  %117 = mul i32 %116, %35
  %118 = add i32 %117, %115
  %119 = extractvalue %dx.types.CBufRet.i32 %113, 2
  %120 = mul i32 %119, %29
  %121 = add i32 %118, %120
  %122 = call %dx.types.ResRet.f16 @dx.op.rawBufferLoad.f16(i32 139, %dx.types.Handle %3, i32 %121, i32 0, i8 1, i32 2)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %123 = extractvalue %dx.types.ResRet.f16 %122, 0
  %124 = fpext half %123 to float
  %125 = extractvalue %dx.types.CBufRet.i32 %60, 3
  %126 = icmp eq i32 %125, 2
  br i1 %126, label %127, label %133, !dx.controlflow.hints !17

; <label>:127                                     ; preds = %112
  %128 = extractvalue %dx.types.CBufRet.i32 %113, 3
  %129 = add i32 %128, %121
  %130 = call %dx.types.ResRet.f16 @dx.op.rawBufferLoad.f16(i32 139, %dx.types.Handle %3, i32 %129, i32 0, i8 1, i32 2)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %131 = extractvalue %dx.types.ResRet.f16 %130, 0
  %132 = fpext half %131 to float
  br label %133

; <label>:133                                     ; preds = %127, %112, %108
  %134 = phi float [ %124, %127 ], [ %124, %112 ], [ 0.000000e+00, %108 ]
  %135 = phi float [ %132, %127 ], [ 0.000000e+00, %112 ], [ 0.000000e+00, %108 ]
  %136 = fmul fast float %134, %109
  %137 = fmul fast float %135, %110
  %138 = fsub fast float %136, %137
  %139 = fmul fast float %134, %110
  %140 = fmul fast float %135, %109
  %141 = fadd fast float %140, %139
  %142 = add i32 %18, -1
  %143 = and i32 %28, %142
  %144 = extractvalue %dx.types.CBufRet.i32 %7, 3
  %145 = icmp eq i32 %144, 1
  %146 = select i1 %145, float 0x401921FB60000000, float 0xC01921FB60000000
  %147 = uitofp i32 %143 to float
  %148 = fmul fast float %146, %147
  %149 = uitofp i32 %18 to float
  %150 = fdiv fast float %148, %149
  %151 = call float @dx.op.unary.f32(i32 12, float %150)  ; Cos(value)
  %152 = call float @dx.op.unary.f32(i32 13, float %150)  ; Sin(value)
  %153 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %4, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %154 = extractvalue %dx.types.CBufRet.i32 %153, 2
  %155 = mul i32 %154, %9
  %156 = extractvalue %dx.types.CBufRet.i32 %153, 3
  %157 = add i32 %155, %156
  %158 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %4, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %159 = extractvalue %dx.types.CBufRet.f32 %158, 2
  %160 = fmul fast float %151, %138
  %161 = fmul fast float %152, %141
  %162 = fsub fast float %87, %88
  %163 = fadd fast float %162, %160
  %164 = fsub fast float %163, %161
  %165 = fmul fast float %159, %164
  %166 = getelementptr [2 x float], [2 x float]* %6, i32 0, i32 %155
  store float %165, float* %166, align 4, !tbaa !18
  %167 = fmul fast float %151, %141
  %168 = fmul fast float %152, %138
  %169 = fadd fast float %90, %89
  %170 = fadd fast float %169, %167
  %171 = fadd fast float %170, %168
  %172 = fmul fast float %159, %171
  %173 = getelementptr [2 x float], [2 x float]* %6, i32 0, i32 %157
  store float %172, float* %173, align 4, !tbaa !18
  %174 = extractvalue %dx.types.CBufRet.i32 %13, 1
  %175 = icmp eq i32 %174, 1
  %176 = getelementptr inbounds [2 x float], [2 x float]* %6, i32 0, i32 0
  %177 = load float, float* %176, align 4
  %178 = getelementptr inbounds [2 x float], [2 x float]* %6, i32 0, i32 1
  %179 = load float, float* %178, align 4
  br i1 %175, label %180, label %195

; <label>:180                                     ; preds = %133
  %181 = fmul fast float %147, %147
  %182 = fmul fast float %181, 0xC00921FB60000000
  %183 = uitofp i32 %23 to float
  %184 = fdiv fast float %182, %183
  %185 = call float @dx.op.unary.f32(i32 12, float %184)  ; Cos(value)
  %186 = call float @dx.op.unary.f32(i32 13, float %184)  ; Sin(value)
  %187 = fmul fast float %177, %185
  %188 = fmul fast float %179, %186
  %189 = fsub fast float %187, %188
  %190 = fptrunc float %189 to half
  call void @dx.op.rawBufferStore.f16(i32 140, %dx.types.Handle %2, i32 %155, i32 0, half %190, half undef, half undef, half undef, i8 1, i32 2)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  %191 = fmul fast float %177, %186
  %192 = fmul fast float %179, %185
  %193 = fadd fast float %192, %191
  %194 = fptrunc float %193 to half
  call void @dx.op.rawBufferStore.f16(i32 140, %dx.types.Handle %2, i32 %157, i32 0, half %194, half undef, half undef, half undef, i8 1, i32 2)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  br label %198

; <label>:195                                     ; preds = %133
  %196 = fptrunc float %177 to half
  call void @dx.op.rawBufferStore.f16(i32 140, %dx.types.Handle %2, i32 %155, i32 0, half %196, half undef, half undef, half undef, i8 1, i32 2)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  %197 = fptrunc float %179 to half
  call void @dx.op.rawBufferStore.f16(i32 140, %dx.types.Handle %2, i32 %157, i32 0, half %197, half undef, half undef, half undef, i8 1, i32 2)  ; RawBufferStore(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)
  br label %198

; <label>:198                                     ; preds = %195, %180, %0
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @dx.op.threadId.i32(i32, i32) #0

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #0

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f16 @dx.op.rawBufferLoad.f16(i32, %dx.types.Handle, i32, i32, i8, i32) #1

; Function Attrs: nounwind
declare void @dx.op.rawBufferStore.f16(i32, %dx.types.Handle, i32, i32, half, half, half, half, i8, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandle(i32, i8, i32, i32, i1) #1

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind readonly }
attributes #2 = { nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!11}

!0 = !{!"clang version 3.7 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 2}
!2 = !{i32 1, i32 6}
!3 = !{!"cs", i32 6, i32 2}
!4 = !{null, !5, !9, null}
!5 = !{!6, !7, !8}
!6 = !{i32 0, %"class.RWStructuredBuffer<half>"* undef, !"", i32 0, i32 0, i32 1, i32 12, i1 false, i1 false, i1 false, !1}
!7 = !{i32 1, %"class.RWStructuredBuffer<half>"* undef, !"", i32 0, i32 1, i32 1, i32 12, i1 false, i1 false, i1 false, !1}
!8 = !{i32 2, %"class.RWStructuredBuffer<half>"* undef, !"", i32 0, i32 2, i32 1, i32 12, i1 false, i1 false, i1 false, !1}
!9 = !{!10}
!10 = !{i32 0, %Constants* undef, !"", i32 0, i32 0, i32 1, i32 128, null}
!11 = !{void ()* @DFT, !"DFT", null, !4, !12}
!12 = !{i32 0, i64 8388656, i32 4, !13}
!13 = !{i32 64, i32 1, i32 1}
!14 = distinct !{!14, !"dx.controlflow.hints", i32 1}
!15 = distinct !{!15, !"dx.controlflow.hints", i32 1}
!16 = distinct !{!16, !"dx.controlflow.hints", i32 1}
!17 = distinct !{!17, !"dx.controlflow.hints", i32 1}
!18 = !{!19, !19, i64 0}
!19 = !{!"float", !20, i64 0}
!20 = !{!"omnipotent char", !21, i64 0}
!21 = !{!"Simple C/C++ TBAA"}

#endif

const unsigned char g_DFT[] = {
  0x44, 0x58, 0x42, 0x43, 0x9f, 0xf6, 0x99, 0xa4, 0xdb, 0xc5, 0x45, 0x1a,
  0x4c, 0x07, 0xa6, 0xd3, 0x0d, 0xe5, 0x19, 0xc8, 0x01, 0x00, 0x00, 0x00,
  0xc4, 0x0c, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,
  0x48, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00,
  0x18, 0x01, 0x00, 0x00, 0x34, 0x01, 0x00, 0x00, 0x53, 0x46, 0x49, 0x30,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x49, 0x53, 0x47, 0x31, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x4f, 0x53, 0x47, 0x31, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x50, 0x53, 0x56, 0x30,
  0xa8, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x05, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x18, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x48, 0x41, 0x53, 0x48, 0x14, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xf5, 0x62, 0x02, 0x69, 0xe4, 0x06, 0x36, 0x43,
  0x48, 0x6b, 0x24, 0x38, 0x9b, 0x16, 0xd9, 0x9d, 0x44, 0x58, 0x49, 0x4c,
  0x88, 0x0b, 0x00, 0x00, 0x62, 0x00, 0x05, 0x00, 0xe2, 0x02, 0x00, 0x00,
  0x44, 0x58, 0x49, 0x4c, 0x02, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x70, 0x0b, 0x00, 0x00, 0x42, 0x43, 0xc0, 0xde, 0x21, 0x0c, 0x00, 0x00,
  0xd9, 0x02, 0x00, 0x00, 0x0b, 0x82, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x07, 0x81, 0x23, 0x91, 0x41, 0xc8, 0x04, 0x49,
  0x06, 0x10, 0x32, 0x39, 0x92, 0x01, 0x84, 0x0c, 0x25, 0x05, 0x08, 0x19,
  0x1e, 0x04, 0x8b, 0x62, 0x80, 0x18, 0x45, 0x02, 0x42, 0x92, 0x0b, 0x42,
  0xc4, 0x10, 0x32, 0x14, 0x38, 0x08, 0x18, 0x4b, 0x0a, 0x32, 0x62, 0x88,
  0x48, 0x90, 0x14, 0x20, 0x43, 0x46, 0x88, 0xa5, 0x00, 0x19, 0x32, 0x42,
  0xe4, 0x48, 0x0e, 0x90, 0x11, 0x23, 0xc4, 0x50, 0x41, 0x51, 0x81, 0x8c,
  0xe1, 0x83, 0xe5, 0x8a, 0x04, 0x31, 0x46, 0x06, 0x51, 0x18, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x1b, 0x8c, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07,
  0x40, 0x02, 0xa8, 0x0d, 0x86, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x03, 0x20,
  0x01, 0xd5, 0x06, 0x62, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x01, 0x90, 0x00,
  0x49, 0x18, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x82, 0x60, 0x42,
  0x20, 0x4c, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x89, 0x20, 0x00, 0x00,
  0x42, 0x00, 0x00, 0x00, 0x32, 0x22, 0x88, 0x09, 0x20, 0x64, 0x85, 0x04,
  0x13, 0x23, 0xa4, 0x84, 0x04, 0x13, 0x23, 0xe3, 0x84, 0xa1, 0x90, 0x14,
  0x12, 0x4c, 0x8c, 0x8c, 0x0b, 0x84, 0xc4, 0x4c, 0x10, 0x98, 0xc1, 0x08,
  0x40, 0x09, 0x00, 0x0a, 0xe6, 0x08, 0xc0, 0xa0, 0x0c, 0xc3, 0x30, 0x10,
  0x31, 0x03, 0x50, 0x06, 0x63, 0x30, 0xe8, 0x18, 0x05, 0xb8, 0x69, 0xb8,
  0xfc, 0x09, 0x7b, 0x08, 0xc9, 0x5f, 0x09, 0x69, 0x25, 0x26, 0xbf, 0xa8,
  0x75, 0x54, 0x24, 0x49, 0x92, 0x0c, 0x73, 0x04, 0x08, 0x2d, 0xf7, 0x0c,
  0x97, 0x3f, 0x61, 0x0f, 0x21, 0xf9, 0x21, 0xd0, 0x0c, 0x0b, 0x81, 0x02,
  0xa6, 0x1c, 0xca, 0xd0, 0x0c, 0xc3, 0x32, 0x90, 0x53, 0x16, 0x60, 0x68,
  0x86, 0x21, 0x49, 0x92, 0x64, 0x19, 0x08, 0x3a, 0x6a, 0xb8, 0xfc, 0x09,
  0x7b, 0x08, 0xc9, 0xe7, 0x36, 0xaa, 0x58, 0x89, 0xc9, 0x47, 0x6e, 0x1b,
  0x11, 0xc3, 0x30, 0x0c, 0x85, 0x90, 0x86, 0x66, 0xa0, 0xe9, 0xa8, 0xe1,
  0xf2, 0x27, 0xec, 0x21, 0x24, 0x9f, 0xdb, 0xa8, 0x62, 0x25, 0x26, 0xbf,
  0xb8, 0x6d, 0x44, 0x18, 0x86, 0x61, 0x14, 0xa2, 0x1a, 0x9a, 0x81, 0xac,
  0x39, 0x82, 0xa0, 0x18, 0xcd, 0xb0, 0x0c, 0x03, 0x46, 0xd9, 0x40, 0xc0,
  0x4c, 0xde, 0x38, 0xb0, 0x43, 0x38, 0xcc, 0xc3, 0x3c, 0xb8, 0x81, 0x2c,
  0xdc, 0xc2, 0x2c, 0xd0, 0x83, 0x3c, 0xd4, 0xc3, 0x38, 0xd0, 0x43, 0x3d,
  0xc8, 0x43, 0x39, 0x90, 0x83, 0x28, 0xd4, 0x83, 0x39, 0x98, 0x43, 0x39,
  0xc8, 0x03, 0x1f, 0xa0, 0x43, 0x38, 0xb0, 0x83, 0x39, 0xf8, 0x01, 0x0a,
  0x12, 0xe2, 0x86, 0x11, 0x88, 0xe1, 0x12, 0xce, 0x69, 0xa4, 0x09, 0x68,
  0x26, 0x09, 0x39, 0xc3, 0x30, 0x0c, 0x9e, 0xe7, 0x79, 0x9e, 0x37, 0x0c,
  0xc6, 0x40, 0xdf, 0x1c, 0x01, 0x28, 0xa4, 0x80, 0x41, 0xe2, 0x14, 0x00,
  0x19, 0x00, 0x00, 0x00, 0x13, 0x14, 0x72, 0xc0, 0x87, 0x74, 0x60, 0x87,
  0x36, 0x68, 0x87, 0x79, 0x68, 0x03, 0x72, 0xc0, 0x87, 0x0d, 0xae, 0x50,
  0x0e, 0x6d, 0xd0, 0x0e, 0x7a, 0x50, 0x0e, 0x6d, 0x00, 0x0f, 0x7a, 0x30,
  0x07, 0x72, 0xa0, 0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x71, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x6d, 0x90, 0x0e, 0x78, 0xa0, 0x07, 0x78, 0xd0,
  0x06, 0xe9, 0x10, 0x07, 0x76, 0xa0, 0x07, 0x71, 0x60, 0x07, 0x6d, 0x90,
  0x0e, 0x73, 0x20, 0x07, 0x7a, 0x30, 0x07, 0x72, 0xd0, 0x06, 0xe9, 0x60,
  0x07, 0x74, 0xa0, 0x07, 0x76, 0x40, 0x07, 0x6d, 0x60, 0x0e, 0x71, 0x60,
  0x07, 0x7a, 0x10, 0x07, 0x76, 0xd0, 0x06, 0xe6, 0x30, 0x07, 0x72, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x6d, 0x60, 0x0e, 0x76, 0x40, 0x07, 0x7a, 0x60,
  0x07, 0x74, 0xd0, 0x06, 0xee, 0x80, 0x07, 0x7a, 0x10, 0x07, 0x76, 0xa0,
  0x07, 0x73, 0x20, 0x07, 0x7a, 0x60, 0x07, 0x74, 0x30, 0xe4, 0x09, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xc8, 0x43,
  0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x90,
  0xe7, 0x00, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
  0x21, 0x8f, 0x03, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x43, 0x1e, 0x08, 0x08, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x86, 0x3c, 0x13, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0c, 0x79, 0x2c, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x18, 0xf2, 0x64, 0x40, 0x00, 0x08, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x05, 0x02, 0x0d, 0x00, 0x00, 0x00,
  0x32, 0x1e, 0x98, 0x14, 0x19, 0x11, 0x4c, 0x90, 0x8c, 0x09, 0x26, 0x47,
  0xc6, 0x04, 0x43, 0x1a, 0x4a, 0xa0, 0x08, 0x8a, 0x61, 0x04, 0xa0, 0x30,
  0x0a, 0x50, 0xa0, 0x10, 0x0a, 0x30, 0x80, 0xb0, 0x11, 0x00, 0x0a, 0x47,
  0x00, 0x0a, 0x1c, 0x10, 0x10, 0x81, 0xc0, 0x19, 0x00, 0xea, 0x66, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00,
  0x1a, 0x03, 0x4c, 0x90, 0x46, 0x02, 0x13, 0x44, 0x35, 0x18, 0x63, 0x0b,
  0x73, 0x3b, 0x03, 0xb1, 0x2b, 0x93, 0x9b, 0x4b, 0x7b, 0x73, 0x03, 0x99,
  0x71, 0xb9, 0x01, 0x41, 0xa1, 0x0b, 0x3b, 0x9b, 0x7b, 0x91, 0x2a, 0x62,
  0x2a, 0x0a, 0x9a, 0x2a, 0xfa, 0x9a, 0xb9, 0x81, 0x79, 0x31, 0x4b, 0x73,
  0x0b, 0x63, 0x4b, 0xd9, 0x10, 0x04, 0x13, 0x84, 0x01, 0x99, 0x20, 0x0c,
  0xc9, 0x06, 0x61, 0x20, 0x26, 0x08, 0x83, 0xb2, 0x41, 0x18, 0x0c, 0x0a,
  0x63, 0x73, 0x1b, 0x06, 0xc4, 0x20, 0x26, 0x08, 0xc3, 0x32, 0x41, 0xe8,
  0x28, 0x02, 0x13, 0x84, 0x81, 0x99, 0x20, 0x60, 0xd0, 0x86, 0x45, 0x59,
  0x18, 0x45, 0x19, 0x1a, 0xc7, 0x71, 0x8a, 0x0d, 0xcb, 0xb0, 0x30, 0xca,
  0x30, 0x34, 0x8e, 0xe3, 0x14, 0x1b, 0x16, 0x62, 0x61, 0x14, 0x62, 0x68,
  0x1c, 0xc7, 0x29, 0x36, 0x0c, 0x0f, 0x14, 0x4d, 0x10, 0xc0, 0x60, 0x9a,
  0x20, 0x0c, 0xcd, 0x06, 0x44, 0x99, 0x18, 0x45, 0x19, 0x28, 0x60, 0x43,
  0x50, 0x6d, 0x20, 0x00, 0xc9, 0x02, 0x26, 0x08, 0x02, 0xc0, 0x81, 0xc8,
  0x88, 0x6a, 0x82, 0x10, 0x06, 0xd2, 0x04, 0x61, 0x70, 0x26, 0x08, 0xc3,
  0xb3, 0x61, 0xe0, 0x86, 0x61, 0x03, 0xa1, 0x68, 0x5b, 0xb7, 0xa1, 0xc0,
  0x32, 0xe0, 0xf2, 0x48, 0x91, 0xe1, 0xb9, 0x8c, 0xbd, 0xb9, 0xd1, 0xc9,
  0xbd, 0xb1, 0x99, 0xb1, 0xbd, 0xdd, 0xb9, 0xa0, 0xa5, 0xb9, 0xd1, 0xcd,
  0xad, 0x18, 0xc2, 0x00, 0x0c, 0x86, 0x15, 0x83, 0x18, 0x80, 0xc1, 0xb0,
  0x62, 0x18, 0x03, 0x30, 0x18, 0x56, 0x0c, 0x64, 0x00, 0x06, 0x03, 0x0b,
  0x33, 0xb6, 0xb7, 0x30, 0x3a, 0x3e, 0x6f, 0x6d, 0x6e, 0x69, 0x70, 0x6f,
  0x74, 0x65, 0x6e, 0x74, 0x20, 0x63, 0x68, 0x61, 0x72, 0x8c, 0xa6, 0xd2,
  0xda, 0xe0, 0xd8, 0xca, 0x40, 0x86, 0x5e, 0x86, 0x56, 0x56, 0x40, 0xa8,
  0x84, 0x82, 0x82, 0x36, 0x04, 0x67, 0x30, 0x41, 0x08, 0x83, 0x68, 0xc3,
  0x60, 0x06, 0x68, 0x90, 0x06, 0x1b, 0x86, 0x32, 0x50, 0x83, 0x34, 0xd8,
  0x30, 0xac, 0xc1, 0x1a, 0xa4, 0x41, 0x15, 0x36, 0x36, 0xbb, 0x36, 0x97,
  0x34, 0xb2, 0x32, 0x37, 0xba, 0x29, 0x41, 0x50, 0x85, 0x0c, 0xcf, 0xc5,
  0xae, 0x4c, 0x6e, 0x2e, 0xed, 0xcd, 0x6d, 0x4a, 0x40, 0x34, 0x21, 0xc3,
  0x73, 0xb1, 0x0b, 0x63, 0xb3, 0x2b, 0x93, 0x9b, 0x12, 0x18, 0x75, 0xc8,
  0xf0, 0x5c, 0xe6, 0xd0, 0xc2, 0xc8, 0xca, 0xe4, 0x9a, 0xde, 0xc8, 0xca,
  0xd8, 0xa6, 0x04, 0x48, 0x19, 0x32, 0x3c, 0x17, 0xb9, 0xb2, 0xb9, 0xb7,
  0x3a, 0xb9, 0xb1, 0xb2, 0xb9, 0x29, 0x81, 0x55, 0x87, 0x0c, 0xcf, 0xa5,
  0xcc, 0x8d, 0x4e, 0x2e, 0x0f, 0xea, 0x2d, 0xcd, 0x8d, 0x6e, 0x6e, 0x4a,
  0xe0, 0x01, 0x00, 0x00, 0x79, 0x18, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00,
  0x33, 0x08, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0x66, 0x14, 0x01, 0x3d, 0x88,
  0x43, 0x38, 0x84, 0xc3, 0x8c, 0x42, 0x80, 0x07, 0x79, 0x78, 0x07, 0x73,
  0x98, 0x71, 0x0c, 0xe6, 0x00, 0x0f, 0xed, 0x10, 0x0e, 0xf4, 0x80, 0x0e,
  0x33, 0x0c, 0x42, 0x1e, 0xc2, 0xc1, 0x1d, 0xce, 0xa1, 0x1c, 0x66, 0x30,
  0x05, 0x3d, 0x88, 0x43, 0x38, 0x84, 0x83, 0x1b, 0xcc, 0x03, 0x3d, 0xc8,
  0x43, 0x3d, 0x8c, 0x03, 0x3d, 0xcc, 0x78, 0x8c, 0x74, 0x70, 0x07, 0x7b,
  0x08, 0x07, 0x79, 0x48, 0x87, 0x70, 0x70, 0x07, 0x7a, 0x70, 0x03, 0x76,
  0x78, 0x87, 0x70, 0x20, 0x87, 0x19, 0xcc, 0x11, 0x0e, 0xec, 0x90, 0x0e,
  0xe1, 0x30, 0x0f, 0x6e, 0x30, 0x0f, 0xe3, 0xf0, 0x0e, 0xf0, 0x50, 0x0e,
  0x33, 0x10, 0xc4, 0x1d, 0xde, 0x21, 0x1c, 0xd8, 0x21, 0x1d, 0xc2, 0x61,
  0x1e, 0x66, 0x30, 0x89, 0x3b, 0xbc, 0x83, 0x3b, 0xd0, 0x43, 0x39, 0xb4,
  0x03, 0x3c, 0xbc, 0x83, 0x3c, 0x84, 0x03, 0x3b, 0xcc, 0xf0, 0x14, 0x76,
  0x60, 0x07, 0x7b, 0x68, 0x07, 0x37, 0x68, 0x87, 0x72, 0x68, 0x07, 0x37,
  0x80, 0x87, 0x70, 0x90, 0x87, 0x70, 0x60, 0x07, 0x76, 0x28, 0x07, 0x76,
  0xf8, 0x05, 0x76, 0x78, 0x87, 0x77, 0x80, 0x87, 0x5f, 0x08, 0x87, 0x71,
  0x18, 0x87, 0x72, 0x98, 0x87, 0x79, 0x98, 0x81, 0x2c, 0xee, 0xf0, 0x0e,
  0xee, 0xe0, 0x0e, 0xf5, 0xc0, 0x0e, 0xec, 0x30, 0x03, 0x62, 0xc8, 0xa1,
  0x1c, 0xe4, 0xa1, 0x1c, 0xcc, 0xa1, 0x1c, 0xe4, 0xa1, 0x1c, 0xdc, 0x61,
  0x1c, 0xca, 0x21, 0x1c, 0xc4, 0x81, 0x1d, 0xca, 0x61, 0x06, 0xd6, 0x90,
  0x43, 0x39, 0xc8, 0x43, 0x39, 0x98, 0x43, 0x39, 0xc8, 0x43, 0x39, 0xb8,
  0xc3, 0x38, 0x94, 0x43, 0x38, 0x88, 0x03, 0x3b, 0x94, 0xc3, 0x2f, 0xbc,
  0x83, 0x3c, 0xfc, 0x82, 0x3b, 0xd4, 0x03, 0x3b, 0xb0, 0xc3, 0x0c, 0xc4,
  0x21, 0x07, 0x7c, 0x70, 0x03, 0x7a, 0x28, 0x87, 0x76, 0x80, 0x87, 0x19,
  0xd5, 0x43, 0x0e, 0xf8, 0xe0, 0x06, 0xe3, 0xf0, 0x0e, 0xee, 0x40, 0x0f,
  0xf2, 0xf0, 0x0e, 0xec, 0x60, 0x0e, 0xec, 0xf0, 0x0e, 0xf7, 0xe0, 0x06,
  0xe8, 0x90, 0x0e, 0xee, 0x40, 0x0f, 0xf3, 0x30, 0x23, 0x82, 0xc8, 0x01,
  0x1f, 0xdc, 0x80, 0x1c, 0xc4, 0xe1, 0x1c, 0xdc, 0xc0, 0x1e, 0xc2, 0x41,
  0x1e, 0xd8, 0x21, 0x1c, 0xf2, 0xe1, 0x1d, 0xea, 0x81, 0x1e, 0x66, 0x30,
  0x11, 0x39, 0xe0, 0x83, 0x1b, 0x88, 0x83, 0x3c, 0x94, 0x43, 0x38, 0xac,
  0x83, 0x1b, 0x88, 0x83, 0x3c, 0x00, 0x00, 0x00, 0x71, 0x20, 0x00, 0x00,
  0x22, 0x00, 0x00, 0x00, 0x06, 0x30, 0x74, 0x5f, 0x6b, 0x06, 0xdb, 0x70,
  0xf9, 0xce, 0xe3, 0x0b, 0x01, 0x55, 0x14, 0x44, 0x54, 0x3a, 0xc0, 0x50,
  0x12, 0x06, 0x20, 0x60, 0x7e, 0x71, 0xdb, 0x56, 0xb0, 0x0d, 0x97, 0xef,
  0x3c, 0xbe, 0x10, 0x50, 0x45, 0x41, 0x44, 0xa5, 0x03, 0x0c, 0x25, 0x61,
  0x00, 0x02, 0xe6, 0x23, 0xb7, 0x6d, 0x07, 0xd2, 0x70, 0xf9, 0xce, 0xe3,
  0x0b, 0x11, 0x01, 0x4c, 0x44, 0x08, 0x34, 0xc3, 0x42, 0xd8, 0xc0, 0x35,
  0x5c, 0xbe, 0xf3, 0xf8, 0x11, 0x60, 0x6d, 0x54, 0x51, 0x10, 0x51, 0xe9,
  0x00, 0x83, 0x5f, 0xd4, 0xba, 0x11, 0x60, 0xc3, 0xe5, 0x3b, 0x8f, 0x1f,
  0x01, 0xd6, 0x46, 0x15, 0x05, 0x11, 0xb1, 0x93, 0x13, 0x11, 0x7e, 0x51,
  0xeb, 0x16, 0x20, 0x0d, 0x97, 0xef, 0x3c, 0xfe, 0x74, 0x44, 0x04, 0x30,
  0x88, 0x83, 0x8f, 0xdc, 0xb6, 0x09, 0x3c, 0xc3, 0xe5, 0x3b, 0x8f, 0x4f,
  0x35, 0x40, 0x84, 0xf9, 0xc5, 0x6d, 0x03, 0x00, 0x61, 0x20, 0x00, 0x00,
  0x40, 0x01, 0x00, 0x00, 0x13, 0x04, 0x51, 0x2c, 0x10, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x34, 0x94, 0x5d, 0x59, 0x0a, 0x94, 0x5c, 0x61,
  0x0a, 0x94, 0x4f, 0x39, 0xd4, 0x40, 0x69, 0x94, 0x6e, 0x40, 0x19, 0x94,
  0x02, 0x2d, 0x45, 0x50, 0x02, 0x64, 0x8c, 0x11, 0xec, 0xfe, 0x28, 0xb3,
  0x60, 0x30, 0x46, 0xb0, 0xfb, 0xa3, 0xcc, 0x82, 0xc3, 0x18, 0xc1, 0xee,
  0x8f, 0x32, 0x09, 0x0e, 0x94, 0xcc, 0x00, 0x90, 0x31, 0x46, 0x00, 0x82,
  0x20, 0x88, 0x7f, 0x23, 0x00, 0x00, 0x00, 0x00, 0x23, 0x06, 0x09, 0x00,
  0x82, 0x60, 0x90, 0x85, 0x41, 0x74, 0x7c, 0x1f, 0x36, 0x62, 0x90, 0x00,
  0x20, 0x08, 0x06, 0x99, 0x18, 0x48, 0x48, 0x18, 0x84, 0x41, 0x36, 0x62,
  0x90, 0x00, 0x20, 0x08, 0x06, 0xd9, 0x18, 0x4c, 0xc9, 0xf7, 0x69, 0x23,
  0x06, 0x09, 0x00, 0x82, 0x60, 0x90, 0x91, 0x01, 0xb5, 0x80, 0x01, 0x18,
  0x6c, 0x23, 0x06, 0x06, 0x00, 0x82, 0x60, 0x40, 0xac, 0xc1, 0x13, 0x06,
  0x33, 0x11, 0x62, 0x30, 0x20, 0xa3, 0x30, 0x62, 0x70, 0x00, 0x20, 0x08,
  0x06, 0x53, 0x1a, 0x64, 0xc3, 0x18, 0x8c, 0x26, 0x04, 0x40, 0x05, 0x04,
  0x8c, 0x26, 0x0c, 0xc1, 0x70, 0x83, 0x10, 0x90, 0xc1, 0x2c, 0x43, 0x00,
  0x05, 0x23, 0x06, 0x07, 0x00, 0x82, 0x60, 0x30, 0xb9, 0x81, 0x87, 0x64,
  0xa3, 0x09, 0xc1, 0x50, 0x41, 0x1b, 0xe0, 0x68, 0x02, 0x22, 0x54, 0xe0,
  0x69, 0xc1, 0x41, 0x70, 0x35, 0x80, 0x01, 0x54, 0x10, 0x06, 0x6a, 0x73,
  0x10, 0x5c, 0x60, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0xa6, 0x3b, 0x38,
  0x83, 0xc8, 0x1b, 0x4d, 0x08, 0x82, 0xd1, 0x04, 0x41, 0xa8, 0x40, 0x90,
  0x82, 0x82, 0xaa, 0x48, 0x98, 0x12, 0x88, 0xa9, 0xa1, 0xa8, 0x12, 0x1a,
  0xac, 0x60, 0xb9, 0x5a, 0xd6, 0x00, 0xaa, 0x08, 0xb4, 0x86, 0x00, 0x2a,
  0xa0, 0x60, 0x34, 0xe1, 0x02, 0x86, 0x1b, 0x82, 0x51, 0x00, 0x83, 0x11,
  0x83, 0x03, 0x00, 0x41, 0x30, 0x98, 0x4e, 0xe1, 0x0e, 0xc2, 0xa0, 0x0d,
  0x46, 0x13, 0x02, 0x61, 0xb8, 0xc1, 0x08, 0xc8, 0xa0, 0x88, 0x40, 0x67,
  0x19, 0x04, 0x22, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0x69, 0x15,
  0xf6, 0xa0, 0x0c, 0x4c, 0x61, 0x34, 0x21, 0x10, 0x2a, 0x50, 0x64, 0xc4,
  0x40, 0x01, 0x40, 0x10, 0x0c, 0x1c, 0x58, 0xe8, 0x83, 0x35, 0x08, 0x50,
  0x41, 0x0e, 0x54, 0x61, 0x34, 0x21, 0x00, 0x2e, 0x30, 0x70, 0x34, 0x41,
  0x19, 0x86, 0x1b, 0x02, 0x57, 0x00, 0x83, 0x59, 0x86, 0x81, 0x08, 0x46,
  0x13, 0x90, 0xa1, 0x82, 0x03, 0x46, 0x0c, 0x14, 0x00, 0x04, 0xc1, 0xc0,
  0xb9, 0x05, 0x52, 0x90, 0x83, 0xe0, 0x15, 0xf2, 0x20, 0x16, 0x46, 0x13,
  0x02, 0xe0, 0x02, 0x03, 0x67, 0x09, 0x88, 0x81, 0x0e, 0x03, 0x1a, 0x20,
  0xc1, 0x1d, 0x82, 0x81, 0x0e, 0x83, 0x18, 0xdc, 0x41, 0x70, 0x87, 0x60,
  0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0x26, 0x5d, 0x50, 0x05, 0x3a, 0xb8,
  0x85, 0xd1, 0x84, 0x20, 0x18, 0x6e, 0xc8, 0x02, 0x32, 0x98, 0x65, 0x28,
  0x8e, 0x60, 0xc4, 0xe0, 0x00, 0x40, 0x10, 0x0c, 0xa6, 0x5e, 0x68, 0x85,
  0x3b, 0xc8, 0x85, 0xd1, 0x84, 0x00, 0xa8, 0x60, 0x0c, 0x64, 0x34, 0x61,
  0x08, 0x2a, 0xf0, 0xa4, 0x82, 0x01, 0x46, 0x13, 0x0c, 0xa1, 0x02, 0x33,
  0x90, 0x1a, 0x02, 0x18, 0x31, 0x50, 0x00, 0x10, 0x04, 0x03, 0x07, 0x1d,
  0x6a, 0x21, 0x14, 0x02, 0x70, 0x50, 0x05, 0x71, 0x18, 0x4d, 0x08, 0x80,
  0x0b, 0x0c, 0x1c, 0x4d, 0x78, 0x86, 0xe1, 0x86, 0xc0, 0x1c, 0xc0, 0x60,
  0x96, 0xc1, 0x38, 0x82, 0xd1, 0x04, 0x67, 0xa8, 0xe0, 0x80, 0x11, 0x03,
  0x05, 0x00, 0x41, 0x30, 0x70, 0xde, 0x81, 0x17, 0x50, 0x21, 0x38, 0x87,
  0x58, 0x48, 0x87, 0xd1, 0x84, 0x00, 0xb8, 0xc0, 0xc0, 0x59, 0x82, 0x63,
  0xa0, 0xc3, 0x80, 0x0c, 0xa8, 0xe0, 0x09, 0x62, 0xa0, 0xc3, 0x20, 0x0c,
  0x9f, 0x28, 0x7c, 0x82, 0x30, 0x41, 0x93, 0x8f, 0x09, 0x9a, 0x7c, 0x8c,
  0xd8, 0xe4, 0x63, 0x44, 0x27, 0x9f, 0xe1, 0x06, 0x39, 0x70, 0x03, 0x32,
  0xa8, 0x38, 0x08, 0x74, 0x96, 0x01, 0x51, 0x82, 0x11, 0x83, 0x03, 0x00,
  0x41, 0x30, 0x98, 0xf0, 0x01, 0x1d, 0x64, 0x61, 0x1e, 0x46, 0x13, 0x02,
  0xa1, 0x02, 0x3b, 0x90, 0x11, 0x03, 0x05, 0x00, 0x41, 0x30, 0x70, 0xfa,
  0x41, 0x1d, 0x70, 0x21, 0xa8, 0x87, 0x5f, 0xb8, 0x87, 0xd1, 0x84, 0x00,
  0xb8, 0xc0, 0xc0, 0xd1, 0x84, 0x3b, 0x18, 0x86, 0x1b, 0x82, 0x7d, 0x00,
  0x83, 0x59, 0x86, 0x44, 0x09, 0x46, 0x13, 0x90, 0xa1, 0x82, 0x03, 0x46,
  0x0c, 0x14, 0x00, 0x04, 0xc1, 0xc0, 0x21, 0x89, 0x78, 0xf8, 0x85, 0x80,
  0x1f, 0xcc, 0xc1, 0x1f, 0x46, 0x13, 0x02, 0xe0, 0x02, 0x03, 0x67, 0x09,
  0x94, 0x81, 0x0e, 0x03, 0x4a, 0x20, 0x04, 0x35, 0x8e, 0x81, 0x0e, 0x83,
  0x48, 0x50, 0x03, 0x41, 0x8d, 0x63, 0xb8, 0x61, 0x14, 0xd8, 0x80, 0x0c,
  0x66, 0x19, 0x96, 0x26, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0x09,
  0x25, 0xf0, 0x41, 0x1c, 0x48, 0x62, 0x34, 0x21, 0x00, 0x2a, 0x70, 0x05,
  0x19, 0x4d, 0x18, 0x82, 0x0a, 0x50, 0x41, 0x2a, 0x18, 0x60, 0x34, 0xc1,
  0x10, 0x2a, 0x88, 0x05, 0xa9, 0x21, 0x80, 0x11, 0x03, 0x05, 0x00, 0x41,
  0x30, 0x70, 0x66, 0x02, 0x24, 0xd8, 0x21, 0x58, 0x89, 0x7a, 0x68, 0x89,
  0xd1, 0x84, 0x00, 0xb8, 0xc0, 0xc0, 0xd1, 0x04, 0x3d, 0x18, 0x86, 0x1b,
  0x82, 0x98, 0x00, 0x83, 0x59, 0x06, 0xa6, 0x09, 0x46, 0x13, 0x9c, 0xa1,
  0x82, 0x03, 0x46, 0x0c, 0x14, 0x00, 0x04, 0xc1, 0xc0, 0xd1, 0x89, 0x93,
  0x98, 0x87, 0x40, 0x26, 0xf8, 0x81, 0x26, 0x46, 0x13, 0x02, 0xe0, 0x02,
  0x03, 0x67, 0x09, 0x9a, 0x81, 0x0e, 0x03, 0x62, 0xa0, 0x45, 0x3e, 0x94,
  0x81, 0x0e, 0x83, 0x60, 0xe8, 0x63, 0xa1, 0x0f, 0xc5, 0x04, 0x4c, 0x3e,
  0x26, 0x60, 0xf2, 0x31, 0x21, 0x88, 0x8f, 0x15, 0x9a, 0x7c, 0xac, 0xe0,
  0xe4, 0x63, 0x81, 0x00, 0x9f, 0x82, 0x87, 0x96, 0x80, 0x3a, 0x87, 0x40,
  0x47, 0x13, 0xf8, 0x61, 0x18, 0x6e, 0x08, 0xc6, 0x02, 0x0c, 0xa6, 0x1b,
  0x54, 0x22, 0x25, 0x82, 0x23, 0x8c, 0x32, 0x21, 0x90, 0xcf, 0xdd, 0x83,
  0x51, 0x26, 0x04, 0xf4, 0x19, 0x31, 0x30, 0x00, 0x10, 0x04, 0x83, 0xe3,
  0x2d, 0xca, 0x22, 0x18, 0x31, 0x30, 0x00, 0x10, 0x04, 0x83, 0x03, 0x2e,
  0x6c, 0x42, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x83, 0xc9, 0x2d, 0x7c,
  0x02, 0x25, 0xca, 0x62, 0x34, 0x21, 0x10, 0x2a, 0x28, 0x09, 0x19, 0x4d,
  0x18, 0x86, 0x12, 0x02, 0x18, 0x31, 0x38, 0x00, 0x10, 0x04, 0x03, 0x4b,
  0x2e, 0xc6, 0xa2, 0x25, 0x7c, 0x62, 0x34, 0x21, 0x10, 0x2c, 0xb1, 0xe4,
  0x63, 0x09, 0x25, 0x1f, 0x2b, 0x05, 0x52, 0x88, 0x8f, 0x05, 0x03, 0x7c,
  0x2c, 0x18, 0xe2, 0x63, 0x46, 0x20, 0x9f, 0x25, 0x0e, 0x33, 0x51, 0x17,
  0xcb, 0xb0, 0x01, 0x11, 0x08, 0x03, 0x60, 0x90, 0x26, 0x1f, 0x83, 0x3c,
  0xf9, 0x58, 0x2a, 0xa8, 0x02, 0x7c, 0x2c, 0x18, 0xe0, 0x63, 0xc1, 0x00,
  0x1f, 0x6b, 0x02, 0xf9, 0x2c, 0x71, 0xd0, 0x09, 0xbe, 0x80, 0x86, 0x0d,
  0x88, 0x40, 0x18, 0x80, 0xd1, 0x84, 0x9a, 0x08, 0x86, 0x1b, 0x82, 0xd0,
  0x00, 0x83, 0x2d, 0x0e, 0x3d, 0xf1, 0x17, 0x7f, 0x41, 0x81, 0x31, 0xb6,
  0x38, 0xfc, 0x44, 0x68, 0x90, 0x06, 0x05, 0xc6, 0x98, 0x65, 0x70, 0x9e,
  0xc2, 0xc2, 0x20, 0x0c, 0xe4, 0x63, 0xc1, 0x5a, 0xc8, 0xe7, 0x66, 0xc2,
  0x28, 0x13, 0x02, 0xfa, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0xc1, 0x01,
  0x1b, 0xa6, 0x11, 0x8c, 0x18, 0x18, 0x00, 0x08, 0x82, 0xc1, 0x11, 0x1b,
  0x77, 0x21, 0x58, 0x22, 0xc8, 0xc7, 0x10, 0x41, 0x3e, 0x26, 0x04, 0xf1,
  0xb9, 0x20, 0xb9, 0x11, 0x03, 0x07, 0x00, 0x41, 0x30, 0x80, 0x68, 0x03,
  0x34, 0xde, 0x62, 0x0c, 0x5a, 0x23, 0x98, 0x8b, 0xb9, 0x98, 0x8b, 0xbb,
  0x78, 0x0d, 0x6b, 0x0a, 0xf9, 0x18, 0x73, 0xc8, 0xc7, 0x02, 0x01, 0x3e,
  0x17, 0x24, 0x37, 0x62, 0xe0, 0x00, 0x20, 0x08, 0x06, 0x10, 0x6e, 0x90,
  0xc6, 0x5c, 0x94, 0x41, 0x6c, 0x04, 0x77, 0x71, 0x17, 0x77, 0xb1, 0x17,
  0xb3, 0x31, 0x4b, 0x00, 0x5d, 0x94, 0xdc, 0x88, 0x81, 0x03, 0x80, 0x20,
  0x18, 0x40, 0xb9, 0x51, 0x1a, 0x74, 0x81, 0x06, 0xb2, 0x11, 0xe0, 0x05,
  0x5e, 0xe0, 0x05, 0x5f, 0xd0, 0xc6, 0x41, 0xc9, 0x8d, 0x18, 0x38, 0x00,
  0x08, 0x82, 0x01, 0xa4, 0x1b, 0xa6, 0x51, 0x17, 0x67, 0x30, 0x1b, 0x41,
  0x5e, 0xe4, 0x45, 0x5e, 0xf4, 0x45, 0x6d, 0xcc, 0x12, 0x40, 0x18, 0x10,
  0x03, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x5b, 0x86, 0x34, 0x78,
  0xc0, 0x60, 0xcb, 0x20, 0x07, 0x4f, 0x18, 0x6c, 0x19, 0xfc, 0xe0, 0x11,
  0x83, 0x2d, 0x43, 0x2b, 0x3c, 0x63, 0xb0, 0x65, 0xe0, 0x85, 0x07, 0x0c,
  0xb6, 0x0c, 0xe5, 0xf0, 0x84, 0xc1, 0x96, 0xe1, 0x1d, 0x1e, 0x31, 0xd8,
  0x32, 0xf8, 0xc3, 0x33, 0x06, 0x5b, 0x06, 0xb3, 0x08, 0xd6, 0x60, 0xcb,
  0xe0, 0x16, 0xc1, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00
};

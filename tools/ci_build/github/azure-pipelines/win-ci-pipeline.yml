parameters:
- name: RunOnnxRuntimeTests
  displayName: Run Tests?
  type: boolean
  default: true

stages:
- stage: x64_debug
  dependsOn: []
  jobs:
    - template: templates/win-ci-vs-2019.yml
      parameters:
        BuildConfig: 'Debug'
        EnvSetupScript: setup_env.bat
        buildArch: x64
        additionalBuildFlags: --build_java --build_nodejs --build_wheel
        msbuildPlatform: x64
        isX86: false
        job_name_suffix: x64_debug
        RunOnnxRuntimeTests: ${{ parameters.RunOnnxRuntimeTests }}
        RunStaticCodeAnalysis: false
        isTraining: false
        ORT_EP_NAME: CPU
        GenerateDocumentation: false
        MachinePool: 'Win-CPU-2019'

- stage: x64_release
  dependsOn: []
  jobs:
    - template: templates/win-ci-vs-2019.yml
      parameters:
        BuildConfig: 'RelWithDebInfo'
        EnvSetupScript: setup_env.bat
        buildArch: x64
        # Compare to our Nuget packaging pipeline, this job has "--build_wheel" but doesn't have "--enable_lto --disable_rtti --use_telemetry  --enable_wcos"
        # Python bindings use typeid so I can't disable RTTI here. If it causes a problem, we will need to split this job to two jobs.
        additionalBuildFlags: --build_wheel --build_java --build_nodejs
        msbuildPlatform: x64
        isX86: false
        job_name_suffix: x64_release
        RunOnnxRuntimeTests: ${{ parameters.RunOnnxRuntimeTests }}
        RunStaticCodeAnalysis: true
        isTraining: false
        ORT_EP_NAME: CPU
        GenerateDocumentation: false
        MachinePool: 'Win-CPU-2019'

- stage: x64_release_dnnl
  dependsOn: []
  jobs:
    - template: templates/win-ci-vs-2019.yml
      parameters:
        BuildConfig: 'RelWithDebInfo'
        EnvSetupScript: setup_env.bat
        buildArch: x64
        additionalBuildFlags: --build_wheel --use_dnnl --build_java
        msbuildPlatform: x64
        isX86: false
        job_name_suffix: x64_release
        RunOnnxRuntimeTests: ${{ parameters.RunOnnxRuntimeTests }}
        RunStaticCodeAnalysis: false
        isTraining: false
        ORT_EP_NAME: DNNL
        GenerateDocumentation: false
        MachinePool: 'Win-CPU-2019'

- stage: x64_release_xnnpack
  dependsOn: []
  jobs:
    - template: templates/win-ci-vs-2019.yml
      parameters:
        BuildConfig: 'RelWithDebInfo'
        EnvSetupScript: setup_env.bat
        buildArch: x64
        additionalBuildFlags: --build_wheel --use_xnnpack
        msbuildPlatform: x64
        isX86: false
        job_name_suffix: x64_release
        RunOnnxRuntimeTests: ${{ parameters.RunOnnxRuntimeTests }}
        RunStaticCodeAnalysis: false
        isTraining: false
        ORT_EP_NAME: XNNPACK
        GenerateDocumentation: false
        MachinePool: 'Win-CPU-2019'

- stage: x64_release_winml
  dependsOn: []
  jobs:
    - template: templates/win-ci-vs-2019.yml
      parameters:
        BuildConfig: 'RelWithDebInfo'
        EnvSetupScript: setup_env.bat
        buildArch: x64
        additionalBuildFlags: --use_winml --enable_wcos --disable_rtti
        msbuildPlatform: x64
        isX86: false
        job_name_suffix: x64_release_winml
        RunOnnxRuntimeTests: ${{ parameters.RunOnnxRuntimeTests }}
        # WinML has many warnings
        RunStaticCodeAnalysis: false
        EnablePython: false
        isTraining: false
        ORT_EP_NAME: CPU
        GenerateDocumentation: false
        MachinePool: 'Win-CPU-2019'

- stage: x86_release
  dependsOn: []
  jobs:
    - template: templates/win-ci-vs-2019.yml
      parameters:
        BuildConfig: 'RelWithDebInfo'
        EnvSetupScript: setup_env_x86.bat
        buildArch: x86
        additionalBuildFlags: --build_wheel
        msbuildPlatform: Win32
        isX86: true
        job_name_suffix: x86_release
        RunOnnxRuntimeTests: ${{ parameters.RunOnnxRuntimeTests }}
        RunStaticCodeAnalysis: true
        isTraining: false
        ORT_EP_NAME: CPU
        GenerateDocumentation: false
        MachinePool: 'Win-CPU-2019'

- stage: training_x64_debug
  dependsOn: []
  jobs:
    - template: templates/win-ci-vs-2019.yml
      parameters:
        BuildConfig: 'Debug'
        EnvSetupScript: setup_env.bat
        buildArch: x64
        additionalBuildFlags: --enable_training --build_wheel
        msbuildPlatform: x64
        isX86: false
        job_name_suffix: training_x64_debug
        RunOnnxRuntimeTests: ${{ parameters.RunOnnxRuntimeTests }}
        RunStaticCodeAnalysis: false
        isTraining: true
        ORT_EP_NAME: CPU
        GenerateDocumentation: false
        MachinePool: 'onnxruntime-Win2019-CPU-training'

- stage: training_x64_release
  dependsOn: []
  jobs:
    - template: templates/win-ci-vs-2019.yml
      parameters:
        BuildConfig: 'RelWithDebInfo'
        EnvSetupScript: setup_env.bat
        buildArch: x64
        additionalBuildFlags: --enable_training --build_wheel
        msbuildPlatform: x64
        isX86: false
        job_name_suffix: training_x64_release
        RunOnnxRuntimeTests: ${{ parameters.RunOnnxRuntimeTests }}
        RunStaticCodeAnalysis: true
        isTraining: true
        ORT_EP_NAME: CPU
        GenerateDocumentation: false
        MachinePool: 'onnxruntime-Win2019-CPU-training'

- stage: training_on_device_x64_release
  dependsOn: []
  jobs:
    - template: templates/win-ci-vs-2019.yml
      parameters:
        BuildConfig: 'RelWithDebInfo'
        EnvSetupScript: setup_env.bat
        buildArch: x64
        additionalBuildFlags: --enable_training --enable_training_on_device
        msbuildPlatform: x64
        isX86: false
        job_name_suffix: training_on_device_x64_release
        RunOnnxRuntimeTests: ${{ parameters.RunOnnxRuntimeTests }}
        RunStaticCodeAnalysis: true
        EnablePython: false
        isTraining: true
        ORT_EP_NAME: CPU
        GenerateDocumentation: false
        MachinePool: 'onnxruntime-Win2019-CPU-training'

- stage: sdl
  dependsOn: []
  jobs:
    - job: Prefast
      timeoutInMinutes: 120
      workspace:
        clean: all
      variables:
        skipComponentGovernanceDetection: true
      pool: onnxruntime-win-cpu-2022
      steps:
       - task: UsePythonVersion@0
         displayName: 'Use Python 3.x'

       - task: SDLNativeRules@3
         displayName: 'Run the PREfast SDL Native Rules for MSBuild'
         inputs:
           publishXML: true
           setupCommandlines: 'python $(Build.SourcesDirectory)\tools\ci_build\build.py --config Debug --build_dir $(Build.SourcesDirectory)\b --skip_submodule_sync --build_shared_lib --update --cmake_generator "Visual Studio 17 2022" --build_shared_lib --cmake_extra_defines onnxruntime_ENABLE_STATIC_ANALYSIS=ON'
           msBuildCommandline: '"C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\amd64\MSBuild.exe" "$(Build.SourcesDirectory)\b\Debug\onnxruntime.sln" /p:RunCodeAnalysis=true /p:platform=x64 /p:configuration=Debug /p:VisualStudioVersion="17.0" /m /p:PreferredToolArchitecture=x64'
           excludedPaths: '$(Build.SourcesDirectory)\b#$(Build.SourcesDirectory)\cmake#C:\program files'
           rulesetName: Custom
           customRuleset: '$(Build.SourcesDirectory)\cmake\Sdl.ruleset'

       - task: SdtReport@2
         displayName: 'Guardian Export'
         inputs:
           GdnExportPolicyMinSev: Warning
           GdnExportGdnToolSDLNativeRulesSeverity: Note

       - task: PublishSecurityAnalysisLogs@3
         displayName: 'Publish Guardian Artifacts'

       - task: PostAnalysis@2
         displayName: 'Guardian Break'
         inputs:
           GdnBreakPolicyMinSev: Warning
           GdnBreakGdnToolSDLNativeRulesSeverity: Note
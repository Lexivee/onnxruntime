parameters:
- name: build_py_parameters
  displayName: >
    Extra parameters to pass to build.py. Don't put newlines in here.
  type: string
  default: ''

- name: enable_linux_cpu
  displayName: 'Whether Linux CPU package is built.'
  type: boolean
  default: true

- name: enable_linux_gpu
  displayName: 'Whether Linux GPU package is built.'
  type: boolean
  default: true

- name: enable_linux_gpu_training
  displayName: 'Whether Linux GPU package is built.'
  type: boolean
  default: false

- name: enable_linux_gpu_py35
  displayName: >
    Whether Linux GPU package is built for Python 3.5.
    enable_linux_gpu must be true for this to have an effect.
  type: boolean
  default: true

- name: enable_windows_cpu
  displayName: 'Whether Windows CPU package is built.'
  type: boolean
  default: true

- name: enable_windows_gpu
  displayName: 'Whether Windows GPU package is built.'
  type: boolean
  default: true

- name: enable_mac_cpu
  displayName: 'Whether Mac CPU package is built.'
  type: boolean
  default: true

- name: enable_linux_arm
  displayName: 'Whether Linux ARM package is built.'
  type: boolean
  default: true

- name: docker_image_prefix
  displayName: 'Prefix to use for docker image names.'
  type: string
  default: 'onnxruntime'

- name: linux_gpu_dockerfile
  displayName: >
    Name of the Dockerfile to use for the Linux GPU build.
    This should refer to a Dockerfile at tools/ci_build/github/linux/docker.
  type: string
  default: 'Dockerfile.manylinux2010_gpu'

stages:
- stage: Python_Packaging

  jobs:  
  - ${{ if eq(parameters.enable_linux_arm, true) }}:
    - job: Linux_ARM_py_Wheels
      timeoutInMinutes: 60
      workspace:
        clean: all
      pool: 'Linux-CPU'
      strategy:
        matrix:
          Py37:
            python.version: '3.7'
          Py36:
            python.version: '3.6'
          Py35:
            python.version: '3.5'
      steps:
      - checkout: self
        clean: true
        submodules: recursive

      - template: set-py-packaging-variables-step.yml

      - template: set-nightly-build-option-variable-step.yml

      - task: CmdLine@2
        inputs:
          script: |
            set -e -x
            sudo apt-get install -y qemu-user-static

            cat << EOF > tool-chain.cmake
            SET(CMAKE_SYSTEM_NAME Linux)
            SET(CMAKE_SYSTEM_VERSION 1)
            SET(CMAKE_C_COMPILER aarch64-linux-gnu-gcc)
            SET(CMAKE_C_FLAGS "-march=armv8-a -mtune=generic -Wno-unused-parameter -Wno-type-limits")
            SET(CMAKE_CXX_COMPILER aarch64-linux-gnu-g++)
            SET(CMAKE_CXX_FLAGS "-march=armv8-a -mtune=generic -Wno-unused-parameter -Wno-type-limits")
            SET(CMAKE_FIND_ROOT_PATH /mnt/toolchains/manylinux2014_aarch64)
            SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
            SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
            SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
            SET(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
            EOF
            export PATH=/mnt/toolchains/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu/bin:$PATH
            azcopy cp https://onnxruntimetestdata.blob.core.windows.net/models/toolchains.tar.xz $(Build.BinariesDirectory)/toolchains.tar.xz
            sudo rm -rf /mnt/toolchains
            sudo mkdir /mnt/toolchains
            sudo tar -Jxf $(Build.BinariesDirectory)/toolchains.tar.xz -C /mnt/toolchains
            aria2c -q https://github.com/protocolbuffers/protobuf/releases/download/v3.11.1/protoc-3.11.1-linux-x86_64.zip
            unzip protoc-3.11.1-linux-x86_64.zip
            sudo cp /mnt/toolchains/manylinux2014_aarch64/usr/include/stdlib.h /mnt/toolchains/gcc-linaro-7.5.0-2019.12-x86_64_aarch64-linux-gnu/aarch64-linux-gnu/libc/usr/include/
            cmake \
              -Donnxruntime_GCC_STATIC_CPP_RUNTIME=ON \
              -DCMAKE_BUILD_TYPE=Release \
              -Dprotobuf_WITH_ZLIB=OFF \
              -DCMAKE_TOOLCHAIN_FILE=tool-chain.cmake \
              -Donnxruntime_ENABLE_PYTHON=ON \
              -DPYTHON_LIBRARY=dl \
              -DPYTHON_EXECUTABLE=/usr/bin/python3  \
              -Donnxruntime_BUILD_SHARED_LIB=OFF \
              -Donnxruntime_RUN_ONNX_TESTS=OFF \
              -Donnxruntime_DEV_MODE=ON \
              -DONNX_CUSTOM_PROTOC_EXECUTABLE=$(Build.BinariesDirectory)/bin/protoc \
              "-DPYTHON_INCLUDE_DIR=/mnt/toolchains/manylinux2014_aarch64/usr/include;/mnt/toolchains/manylinux2014_aarch64/$(python.manylinux.include.dir)" \
              -DNUMPY_INCLUDE_DIR=/mnt/toolchains \
              $(Build.SourcesDirectory)/cmake
            make -j$(getconf _NPROCESSORS_ONLN)
            docker run --rm \
              -e BUILD_BUILDNUMBER \
              -v /data/onnx:/data/onnx:ro \
              -v /usr/bin/qemu-aarch64-static:/usr/bin/qemu-aarch64-static \
              -v $(Build.BinariesDirectory):/tmp/a \
              -v $(Build.SourcesDirectory):/tmp/b \
              -w /tmp/a \
              -u $(id -u ${USER}):$(id -g ${USER}) \
              quay.io/pypa/manylinux2014_aarch64 \
                '$(python.manylinux.dir)'/bin/python3 /tmp/b/setup.py \
                  bdist_wheel ${{ parameters.build_py_parameters }} $(NightlyBuildOption)

          workingDirectory: $(Build.BinariesDirectory)

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: ONNXRuntime python wheel'
        inputs:
          PathtoPublish: '$(Build.BinariesDirectory)/dist'
          ArtifactName: onnxruntime

      - template: component-governance-component-detection-steps.yml
        parameters:
          condition: 'succeeded'

      - template: clean-agent-build-directory-step.yml

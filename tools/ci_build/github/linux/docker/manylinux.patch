diff -urN /mnt/onnxruntime/manylinux/docker/build_scripts/build-cpython.sh build_scripts/build-cpython.sh
--- /mnt/onnxruntime/manylinux/docker/build_scripts/build-cpython.sh	2022-09-20 22:06:42.198699125 +0000
+++ build_scripts/build-cpython.sh	2022-09-20 22:30:38.382320900 +0000
@@ -38,7 +38,7 @@
 	CFLAGS_NODIST="${MANYLINUX_CFLAGS} ${MANYLINUX_CPPFLAGS}" \
 	LDFLAGS_NODIST="${MANYLINUX_LDFLAGS}" \
 	--prefix=${PREFIX} --disable-shared --with-ensurepip=no > /dev/null
-make > /dev/null
+make -j$(nproc) > /dev/null
 make install > /dev/null
 popd
 rm -rf Python-${CPYTHON_VERSION} Python-${CPYTHON_VERSION}.tgz Python-${CPYTHON_VERSION}.tgz.asc
diff -urN /mnt/onnxruntime/manylinux/docker/build_scripts/build-git.sh build_scripts/build-git.sh
--- /mnt/onnxruntime/manylinux/docker/build_scripts/build-git.sh	2022-09-20 22:06:42.198699125 +0000
+++ build_scripts/build-git.sh	2022-09-20 22:30:38.382320900 +0000
@@ -27,7 +27,7 @@
 check_sha256sum ${GIT_ROOT}.tar.gz ${GIT_HASH}
 tar -xzf ${GIT_ROOT}.tar.gz
 pushd ${GIT_ROOT}
-make install prefix=/usr/local NO_GETTEXT=1 NO_TCLTK=1 DESTDIR=/manylinux-rootfs CPPFLAGS="${MANYLINUX_CPPFLAGS}" CFLAGS="${MANYLINUX_CFLAGS}" CXXFLAGS="${MANYLINUX_CXXFLAGS}" LDFLAGS="${MANYLINUX_LDFLAGS}"
+make -j$(nproc) install prefix=/usr/local NO_GETTEXT=1 NO_TCLTK=1 DESTDIR=/manylinux-rootfs CPPFLAGS="${MANYLINUX_CPPFLAGS}" CFLAGS="${MANYLINUX_CFLAGS}" CXXFLAGS="${MANYLINUX_CXXFLAGS}" LDFLAGS="${MANYLINUX_LDFLAGS}"
 popd
 rm -rf ${GIT_ROOT} ${GIT_ROOT}.tar.gz
 
diff -urN /mnt/onnxruntime/manylinux/docker/build_scripts/build-openssl.sh build_scripts/build-openssl.sh
--- /mnt/onnxruntime/manylinux/docker/build_scripts/build-openssl.sh	2022-09-20 22:06:42.198699125 +0000
+++ build_scripts/build-openssl.sh	2022-09-20 22:30:38.382320900 +0000
@@ -42,7 +42,7 @@
 tar -xzf ${OPENSSL_ROOT}.tar.gz
 pushd ${OPENSSL_ROOT}
 ./config no-shared --prefix=/usr/local/ssl --openssldir=/usr/local/ssl CPPFLAGS="${MANYLINUX_CPPFLAGS}" CFLAGS="${MANYLINUX_CFLAGS} -fPIC" CXXFLAGS="${MANYLINUX_CXXFLAGS} -fPIC" LDFLAGS="${MANYLINUX_LDFLAGS} -fPIC" > /dev/null
-make > /dev/null
+make -j$(nproc) > /dev/null
 make install_sw > /dev/null
 popd
 rm -rf ${OPENSSL_ROOT} ${OPENSSL_ROOT}.tar.gz
diff -urN /mnt/onnxruntime/manylinux/docker/build_scripts/build_utils.sh build_scripts/build_utils.sh
--- /mnt/onnxruntime/manylinux/docker/build_scripts/build_utils.sh	2022-09-20 22:06:42.198699125 +0000
+++ build_scripts/build_utils.sh	2022-09-20 22:30:38.382320900 +0000
@@ -33,6 +33,7 @@
     if [ -f ${file} ]; then
         echo "${file} exists, skipping fetch"
     else
+        apt-get update && apt-get install -y curl gpg-agent
         curl -fsSL -o ${file} ${url}/${file}
     fi
 }
@@ -52,7 +53,7 @@
 
 function do_standard_install {
     ./configure "$@" CPPFLAGS="${MANYLINUX_CPPFLAGS}" CFLAGS="${MANYLINUX_CFLAGS}" "CXXFLAGS=${MANYLINUX_CXXFLAGS}" LDFLAGS="${MANYLINUX_LDFLAGS}" > /dev/null
-    make > /dev/null
+    make -j$(nproc) > /dev/null
     make install > /dev/null
 }
 
diff -urN /mnt/onnxruntime/manylinux/docker/build_scripts/install-build-packages.sh build_scripts/install-build-packages.sh
--- /mnt/onnxruntime/manylinux/docker/build_scripts/install-build-packages.sh	2022-09-20 22:06:42.202699191 +0000
+++ build_scripts/install-build-packages.sh	2022-09-20 22:30:38.382320900 +0000
@@ -18,7 +18,7 @@
     if [ "${AUDITWHEEL_POLICY}" == "manylinux_2_28" ]; then
         COMPILE_DEPS="${COMPILE_DEPS} tk-devel"
     fi
-elif [ "${AUDITWHEEL_POLICY}" == "manylinux_2_24" ]; then
+elif [ "${AUDITWHEEL_POLICY}" == "manylinux_2_24" ] || [ "${AUDITWHEEL_POLICY}" == "manylinux_2_27" ]; then
 	PACKAGE_MANAGER=apt
 	COMPILE_DEPS="libbz2-dev libncurses5-dev libreadline-dev tk-dev libgdbm-dev libdb-dev libpcap-dev liblzma-dev openssl libssl-dev libkeyutils-dev libkrb5-dev comerr-dev libidn2-0-dev libcurl4-openssl-dev uuid-dev libffi-dev linux-kernel-headers"
 elif [ "${AUDITWHEEL_POLICY}" == "musllinux_1_1" ]; then
diff -urN /mnt/onnxruntime/manylinux/docker/build_scripts/install-entrypoint.sh build_scripts/install-entrypoint.sh
--- /mnt/onnxruntime/manylinux/docker/build_scripts/install-entrypoint.sh	2022-09-20 22:06:42.202699191 +0000
+++ build_scripts/install-entrypoint.sh	2022-09-20 22:30:38.386320966 +0000
@@ -10,6 +10,61 @@
 MY_DIR=$(dirname "$0")
 
 
+if [[ -f /etc/yum.repos.d/CentOS-Base.repo ]]; then
+    echo "http_caching=packages" >> /etc/yum.conf
+    echo "enabled=0" >> /etc/yum/pluginconf.d/fastestmirror.conf
+    echo "Use the OpenLogic mirrors that are hosted within the Azure datacenters"
+    cat <<EOF > /etc/yum.repos.d/CentOS-Base.repo
+[openlogic]
+name=CentOS-\$releasever - openlogic packages for \$basearch
+baseurl=http://olcentgbl.trafficmanager.net/openlogic/\$releasever/openlogic/\$basearch/
+enabled=1
+gpgcheck=0
+
+[base]
+name=CentOS-\$releasever - Base
+#mirrorlist=http://mirrorlist.centos.org/?release=\$releasever&arch=\$basearch&repo=os&infra=\$infra
+baseurl=http://olcentgbl.trafficmanager.net/centos/\$releasever/os/\$basearch/
+gpgcheck=1
+gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6
+
+#released updates
+[updates]
+name=CentOS-\$releasever - Updates
+#mirrorlist=http://mirrorlist.centos.org/?release=\$releasever&arch=\$basearch&repo=updates&infra=\$infra
+baseurl=http://olcentgbl.trafficmanager.net/centos/\$releasever/updates/\$basearch/
+gpgcheck=1
+gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6
+
+#additional packages that may be useful
+[extras]
+name=CentOS-\$releasever - Extras
+#mirrorlist=http://mirrorlist.centos.org/?release=\$releasever&arch=\$basearch&repo=extras&infra=\$infra
+baseurl=http://olcentgbl.trafficmanager.net/centos/\$releasever/extras/\$basearch/
+gpgcheck=1
+gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6
+
+#additional packages that extend functionality of existing packages
+[centosplus]
+name=CentOS-\$releasever - Plus
+#mirrorlist=http://mirrorlist.centos.org/?release=\$releasever&arch=\$basearch&repo=centosplus&infra=\$infra
+baseurl=http://olcentgbl.trafficmanager.net/centos/\$releasever/centosplus/\$basearch/
+gpgcheck=1
+enabled=0
+gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6
+
+#contrib - packages by Centos Users
+[contrib]
+name=CentOS-\$releasever - Contrib
+#mirrorlist=http://mirrorlist.centos.org/?release=\$releasever&arch=\$basearch&repo=contrib&infra=\$infra
+baseurl=http://olcentgbl.trafficmanager.net/centos/\$releasever/contrib/\$basearch/
+gpgcheck=1
+enabled=0
+gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6
+EOF
+
+yum clean all
+fi
 if [ "${AUDITWHEEL_PLAT}" = "manylinux2014_i686" ]; then
 	echo "i386" > /etc/yum/vars/basearch
 	fixup-mirrors
@@ -26,3 +81,8 @@
 if [ "${AUDITWHEEL_POLICY}" = "musllinux_1_1" ]; then
 	apk add --no-cache bash
 fi
+
+if command -v yum 2>&1 ; then
+    yum install -y yum-plugin-versionlock
+    yum versionlock cuda* libcudnn* libnccl*
+fi
diff -urN /mnt/onnxruntime/manylinux/docker/build_scripts/install-runtime-packages.sh build_scripts/install-runtime-packages.sh
--- /mnt/onnxruntime/manylinux/docker/build_scripts/install-runtime-packages.sh	2022-09-20 22:06:42.202699191 +0000
+++ build_scripts/install-runtime-packages.sh	2022-09-20 23:25:48.940577062 +0000
@@ -34,7 +34,7 @@
 # MANYLINUX_DEPS: Install development packages (except for libgcc which is provided by gcc install)
 if [ "${AUDITWHEEL_POLICY}" == "manylinux2014" ] || [ "${AUDITWHEEL_POLICY}" == "manylinux_2_28" ]; then
 	MANYLINUX_DEPS="glibc-devel libstdc++-devel glib2-devel libX11-devel libXext-devel libXrender-devel mesa-libGL-devel libICE-devel libSM-devel zlib-devel expat-devel"
-elif [ "${AUDITWHEEL_POLICY}" == "manylinux_2_24" ]; then
+elif [ "${AUDITWHEEL_POLICY}" == "manylinux_2_24" ] || [ "${AUDITWHEEL_POLICY}" == "manylinux_2_27" ]; then
 	MANYLINUX_DEPS="libc6-dev libstdc++-6-dev libglib2.0-dev libx11-dev libxext-dev libxrender-dev libgl1-mesa-dev libice-dev libsm-dev libz-dev libexpat1-dev"
 elif [ "${AUDITWHEEL_POLICY}" == "musllinux_1_1" ]; then
 	MANYLINUX_DEPS="musl-dev libstdc++ glib-dev libx11-dev libxext-dev libxrender-dev mesa-dev libice-dev libsm-dev zlib-dev expat-dev"
@@ -51,6 +51,9 @@
     fi
 elif [ "${AUDITWHEEL_POLICY}" == "manylinux_2_24" ]; then
 	RUNTIME_DEPS="zlib1g libbz2-1.0 libexpat1 libncurses5 libreadline7 tk libgdbm3 libdb5.3 libpcap0.8 liblzma5 libssl1.1 libkeyutils1 libkrb5-3 libcomerr2 libidn2-0 libcurl3 uuid libffi6"
+elif [ "${AUDITWHEEL_POLICY}" == "manylinux_2_27" ]; then
+    # remove libgdbm3
+	RUNTIME_DEPS="zlib1g libbz2-1.0 libexpat1 libncurses5 libreadline7 tk libdb5.3 libpcap0.8 liblzma5 libssl1.1 libkeyutils1 libkrb5-3 libcomerr2 libidn2-0 libcurl3 uuid libffi6"
 elif [ "${AUDITWHEEL_POLICY}" == "musllinux_1_1" ]; then
 	RUNTIME_DEPS="zlib bzip2 expat ncurses5-libs readline tk gdbm db xz openssl keyutils-libs krb5-libs libcom_err libidn2 libcurl libuuid libffi"
 else
@@ -68,27 +71,35 @@
 	echo "skip_missing_names_on_install=False" >> /etc/yum.conf
 	# Make sure that locale will not be removed
 	sed -i '/^override_install_langs=/d' /etc/yum.conf
-	# Exclude mirror holding broken package metadata
-	echo "exclude = d36uatko69830t.cloudfront.net" >> /etc/yum/pluginconf.d/fastestmirror.conf
 	yum -y update
 	yum -y install yum-utils curl
 	yum-config-manager --enable extras
-	TOOLCHAIN_DEPS="devtoolset-10-binutils devtoolset-10-gcc devtoolset-10-gcc-c++ devtoolset-10-gcc-gfortran"
+
+
+    
+
 	if [ "${AUDITWHEEL_ARCH}" == "x86_64" ]; then
 		# Software collection (for devtoolset-10)
 		yum -y install centos-release-scl-rh
 		# EPEL support (for yasm)
-		yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
-		TOOLCHAIN_DEPS="${TOOLCHAIN_DEPS} yasm"
+ 		if ! rpm -q --quiet epel-release ; then
+ 		  yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
+ 		fi
+		if [[ -d /opt/rocm ]]; then
+                  TOOLCHAIN_DEPS="devtoolset-10-binutils devtoolset-10-gcc devtoolset-10-gcc-c++ devtoolset-10-gcc-gfortran"
+		else
+                  TOOLCHAIN_DEPS="devtoolset-11-binutils devtoolset-11-gcc devtoolset-11-gcc-c++ devtoolset-11-gcc-gfortran"
+		fi
 	elif [ "${AUDITWHEEL_ARCH}" == "aarch64" ] || [ "${AUDITWHEEL_ARCH}" == "ppc64le" ] || [ "${AUDITWHEEL_ARCH}" == "s390x" ]; then
 		# Software collection (for devtoolset-10)
 		yum -y install centos-release-scl-rh
+		TOOLCHAIN_DEPS="devtoolset-10-binutils devtoolset-10-gcc devtoolset-10-gcc-c++ devtoolset-10-gcc-gfortran"
 	elif [ "${AUDITWHEEL_ARCH}" == "i686" ]; then
 		# No yasm on i686
 		# Install mayeut/devtoolset-10 repo to get devtoolset-10
 		curl -fsSLo /etc/yum.repos.d/mayeut-devtoolset-10.repo https://copr.fedorainfracloud.org/coprs/mayeut/devtoolset-10/repo/custom-1/mayeut-devtoolset-10-custom-1.repo
 	fi
-elif [ "${AUDITWHEEL_POLICY}" == "manylinux_2_24" ]; then
+elif [ "${AUDITWHEEL_POLICY}" == "manylinux_2_24" ] || [ "${AUDITWHEEL_POLICY}" == "manylinux_2_27" ]; then
 	PACKAGE_MANAGER=apt
 	BASETOOLS="${BASETOOLS} hardlink hostname"
 	export DEBIAN_FRONTEND=noninteractive
diff -urN /mnt/onnxruntime/manylinux/docker/build_scripts/install-runtime-packages.sh~ build_scripts/install-runtime-packages.sh~
--- /mnt/onnxruntime/manylinux/docker/build_scripts/install-runtime-packages.sh~	1970-01-01 00:00:00.000000000 +0000
+++ build_scripts/install-runtime-packages.sh~	2022-09-20 22:30:38.386320966 +0000
@@ -0,0 +1,160 @@
+#!/bin/bash
+# Install packages that will be needed at runtime
+
+# Stop at any error, show all commands
+set -exuo pipefail
+
+# Set build environment variables
+MY_DIR=$(dirname "${BASH_SOURCE[0]}")
+
+# Get build utilities
+source $MY_DIR/build_utils.sh
+
+# Libraries that are allowed as part of the manylinux2014 profile
+# Extract from PEP: https://www.python.org/dev/peps/pep-0599/#the-manylinux2014-policy
+# On RPM-based systems, they are provided by these packages:
+# Package:    Libraries
+# glib2:      libglib-2.0.so.0, libgthread-2.0.so.0, libgobject-2.0.so.0
+# glibc:      libresolv.so.2, libutil.so.1, libnsl.so.1, librt.so.1, libpthread.so.0, libdl.so.2, libm.so.6, libc.so.6
+# libICE:     libICE.so.6
+# libX11:     libX11.so.6
+# libXext:    libXext.so.6
+# libXrender: libXrender.so.1
+# libgcc:     libgcc_s.so.1
+# libstdc++:  libstdc++.so.6
+# mesa:       libGL.so.1
+#
+# PEP is missing the package for libSM.so.6 for RPM based system
+#
+# With PEP600, more packages are allowed by auditwheel policies
+# - libz.so.1
+# - libexpat.so.1
+
+
+# MANYLINUX_DEPS: Install development packages (except for libgcc which is provided by gcc install)
+if [ "${AUDITWHEEL_POLICY}" == "manylinux2014" ] || [ "${AUDITWHEEL_POLICY}" == "manylinux_2_28" ]; then
+	MANYLINUX_DEPS="glibc-devel libstdc++-devel glib2-devel libX11-devel libXext-devel libXrender-devel mesa-libGL-devel libICE-devel libSM-devel zlib-devel expat-devel"
+elif [ "${AUDITWHEEL_POLICY}" == "manylinux_2_24" ] || [ "${AUDITWHEEL_POLICY}" == "manylinux_2_27" ]; then
+	MANYLINUX_DEPS="libc6-dev libstdc++-6-dev libglib2.0-dev libx11-dev libxext-dev libxrender-dev libgl1-mesa-dev libice-dev libsm-dev libz-dev libexpat1-dev"
+elif [ "${AUDITWHEEL_POLICY}" == "musllinux_1_1" ]; then
+	MANYLINUX_DEPS="musl-dev libstdc++ glib-dev libx11-dev libxext-dev libxrender-dev mesa-dev libice-dev libsm-dev zlib-dev expat-dev"
+else
+	echo "Unsupported policy: '${AUDITWHEEL_POLICY}'"
+	exit 1
+fi
+
+# RUNTIME_DEPS: Runtime dependencies. c.f. install-build-packages.sh
+if [ "${AUDITWHEEL_POLICY}" == "manylinux2014" ] || [ "${AUDITWHEEL_POLICY}" == "manylinux_2_28" ]; then
+	RUNTIME_DEPS="zlib bzip2 expat ncurses readline gdbm libpcap xz openssl keyutils-libs libkadm5 libcom_err libidn libcurl uuid libffi libdb"
+    if [ "${AUDITWHEEL_POLICY}" == "manylinux_2_28" ]; then
+        RUNTIME_DEPS="${RUNTIME_DEPS} tk"
+    fi
+elif [ "${AUDITWHEEL_POLICY}" == "manylinux_2_24" ]; then
+	RUNTIME_DEPS="zlib1g libbz2-1.0 libexpat1 libncurses5 libreadline7 tk libgdbm3 libdb5.3 libpcap0.8 liblzma5 libssl1.1 libkeyutils1 libkrb5-3 libcomerr2 libidn2-0 libcurl3 uuid libffi6"
+elif [ "${AUDITWHEEL_POLICY}" == "manylinux_2_27" ]; then
+    # remove libgdbm3
+	RUNTIME_DEPS="zlib1g libbz2-1.0 libexpat1 libncurses5 libreadline7 tk libdb5.3 libpcap0.8 liblzma5 libssl1.1 libkeyutils1 libkrb5-3 libcomerr2 libidn2-0 libcurl3 uuid libffi6"
+elif [ "${AUDITWHEEL_POLICY}" == "musllinux_1_1" ]; then
+	RUNTIME_DEPS="zlib bzip2 expat ncurses5-libs readline tk gdbm db xz openssl keyutils-libs krb5-libs libcom_err libidn2 libcurl libuuid libffi"
+else
+	echo "Unsupported policy: '${AUDITWHEEL_POLICY}'"
+	exit 1
+fi
+
+BASETOOLS="autoconf automake bison bzip2 diffutils file make patch unzip"
+if [ "${AUDITWHEEL_POLICY}" == "manylinux2014" ]; then
+	PACKAGE_MANAGER=yum
+	BASETOOLS="${BASETOOLS} hardlink hostname which"
+	# See https://unix.stackexchange.com/questions/41784/can-yum-express-a-preference-for-x86-64-over-i386-packages
+	echo "multilib_policy=best" >> /etc/yum.conf
+	# Error out if requested packages do not exist
+	echo "skip_missing_names_on_install=False" >> /etc/yum.conf
+	# Make sure that locale will not be removed
+	sed -i '/^override_install_langs=/d' /etc/yum.conf
+	yum -y update
+	yum -y install yum-utils curl
+	yum-config-manager --enable extras
+
+
+    
+
+	if [ "${AUDITWHEEL_ARCH}" == "x86_64" ]; then
+		# Software collection (for devtoolset-10)
+		yum -y install centos-release-scl-rh
+		# EPEL support (for yasm)
+ 		if ! rpm -q --quiet epel-release ; then
+ 		  yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
+ 		fi
+		TOOLCHAIN_DEPS="devtoolset-11-binutils devtoolset-11-gcc devtoolset-11-gcc-c++ devtoolset-11-gcc-gfortran"
+		TOOLCHAIN_DEPS="${TOOLCHAIN_DEPS} yasm"
+	elif [ "${AUDITWHEEL_ARCH}" == "aarch64" ] || [ "${AUDITWHEEL_ARCH}" == "ppc64le" ] || [ "${AUDITWHEEL_ARCH}" == "s390x" ]; then
+		# Software collection (for devtoolset-10)
+		yum -y install centos-release-scl-rh
+		TOOLCHAIN_DEPS="devtoolset-10-binutils devtoolset-10-gcc devtoolset-10-gcc-c++ devtoolset-10-gcc-gfortran"
+	elif [ "${AUDITWHEEL_ARCH}" == "i686" ]; then
+		# No yasm on i686
+		# Install mayeut/devtoolset-10 repo to get devtoolset-10
+		curl -fsSLo /etc/yum.repos.d/mayeut-devtoolset-10.repo https://copr.fedorainfracloud.org/coprs/mayeut/devtoolset-10/repo/custom-1/mayeut-devtoolset-10-custom-1.repo
+	fi
+elif [ "${AUDITWHEEL_POLICY}" == "manylinux_2_24" ] || [ "${AUDITWHEEL_POLICY}" == "manylinux_2_27" ]; then
+	PACKAGE_MANAGER=apt
+	BASETOOLS="${BASETOOLS} hardlink hostname"
+	export DEBIAN_FRONTEND=noninteractive
+	sed -i 's/none/en_US/g' /etc/apt/apt.conf.d/docker-no-languages
+	apt-get update -qq
+	apt-get upgrade -qq -y
+	apt-get install -qq -y --no-install-recommends ca-certificates gpg curl locales
+	TOOLCHAIN_DEPS="binutils gcc g++ gfortran"
+elif [ "${AUDITWHEEL_POLICY}" == "manylinux_2_28" ]; then
+	PACKAGE_MANAGER=dnf
+	BASETOOLS="${BASETOOLS} curl glibc-locale-source glibc-langpack-en hardlink hostname libcurl libnsl libxcrypt which"
+	# See https://unix.stackexchange.com/questions/41784/can-yum-express-a-preference-for-x86-64-over-i386-packages
+	echo "multilib_policy=best" >> /etc/yum.conf
+	# Error out if requested packages do not exist
+	echo "skip_missing_names_on_install=False" >> /etc/yum.conf
+	# Make sure that locale will not be removed
+	sed -i '/^override_install_langs=/d' /etc/yum.conf
+	dnf -y upgrade
+	dnf -y install dnf-plugins-core
+	dnf config-manager --set-enabled powertools # for yasm
+	TOOLCHAIN_DEPS="gcc-toolset-11-binutils gcc-toolset-11-gcc gcc-toolset-11-gcc-c++ gcc-toolset-11-gcc-gfortran"
+	if [ "${AUDITWHEEL_ARCH}" == "x86_64" ]; then
+		TOOLCHAIN_DEPS="${TOOLCHAIN_DEPS} yasm"
+	fi
+elif [ "${AUDITWHEEL_POLICY}" == "musllinux_1_1" ]; then
+	TOOLCHAIN_DEPS="binutils gcc g++ gfortran"
+	BASETOOLS="${BASETOOLS} curl util-linux"
+	PACKAGE_MANAGER=apk
+	apk add --no-cache ca-certificates gnupg
+else
+	echo "Unsupported policy: '${AUDITWHEEL_POLICY}'"
+	exit 1
+fi
+
+if [ "${PACKAGE_MANAGER}" == "yum" ]; then
+	yum -y install ${BASETOOLS} ${TOOLCHAIN_DEPS} ${MANYLINUX_DEPS} ${RUNTIME_DEPS}
+elif [ "${PACKAGE_MANAGER}" == "apt" ]; then
+	apt-get install -qq -y --no-install-recommends ${BASETOOLS} ${TOOLCHAIN_DEPS} ${MANYLINUX_DEPS} ${RUNTIME_DEPS}
+elif [ "${PACKAGE_MANAGER}" == "apk" ]; then
+	apk add --no-cache ${BASETOOLS} ${TOOLCHAIN_DEPS} ${MANYLINUX_DEPS} ${RUNTIME_DEPS}
+elif [ "${PACKAGE_MANAGER}" == "dnf" ]; then
+	dnf -y install --allowerasing ${BASETOOLS} ${TOOLCHAIN_DEPS} ${MANYLINUX_DEPS} ${RUNTIME_DEPS}
+else
+	echo "Not implemented"
+	exit 1
+fi
+
+# update system packages, we already updated them but
+# the following script takes care of cleaning-up some things
+# and since it's also needed in the finalize step, everything's
+# centralized in this script to avoid code duplication
+LC_ALL=C ${MY_DIR}/update-system-packages.sh
+
+if [ "${BASE_POLICY}" == "manylinux" ]; then
+	# we'll be removing libcrypt.so.1 later on
+	# this is needed to ensure the new one will be found
+	# as LD_LIBRARY_PATH does not seem enough.
+	# c.f. https://github.com/pypa/manylinux/issues/1022
+	echo "/usr/local/lib" > /etc/ld.so.conf.d/00-manylinux.conf
+	ldconfig
+fi
diff -urN /mnt/onnxruntime/manylinux/docker/build_scripts/python-tag-abi-tag.py build_scripts/python-tag-abi-tag.py
--- /mnt/onnxruntime/manylinux/docker/build_scripts/python-tag-abi-tag.py	2022-09-20 22:06:42.202699191 +0000
+++ build_scripts/python-tag-abi-tag.py	2022-09-20 22:30:38.386320966 +0000
@@ -4,7 +4,6 @@
 
 from wheel.vendored.packaging.tags import sys_tags
 
-
 # first tag is always the more specific tag
 tag = next(sys_tags())
 print("{0}-{1}".format(tag.interpreter, tag.abi))
diff -urN /mnt/onnxruntime/manylinux/docker/build_scripts/update-system-packages.sh build_scripts/update-system-packages.sh
--- /mnt/onnxruntime/manylinux/docker/build_scripts/update-system-packages.sh	2022-09-20 22:06:42.202699191 +0000
+++ build_scripts/update-system-packages.sh	2022-09-20 22:30:38.386320966 +0000
@@ -20,7 +20,7 @@
 	fi
 	yum clean all
 	rm -rf /var/cache/yum
-elif [ "${AUDITWHEEL_POLICY}" == "manylinux_2_24" ]; then
+elif [ "${AUDITWHEEL_POLICY}" == "manylinux_2_24" ] || [ "${AUDITWHEEL_POLICY}" == "manylinux_2_27" ]; then
 	export DEBIAN_FRONTEND=noninteractive
 	apt-get update -qq
 	apt-get upgrade -qq -y
@@ -60,7 +60,7 @@
 		if [ "${AUDITWHEEL_POLICY}" == "manylinux2014" ] || [ "${AUDITWHEEL_POLICY}" == "manylinux_2_28" ]; then
 			mv -f ${LOCALE_ARCHIVE} ${LOCALE_ARCHIVE}.tmpl
 			build-locale-archive --install-langs="en_US.utf8"
-		elif [ "${AUDITWHEEL_POLICY}" == "manylinux_2_24" ]; then
+		elif [ "${AUDITWHEEL_POLICY}" == "manylinux_2_24" ] || [ "${AUDITWHEEL_POLICY}" == "manylinux_2_27" ]; then
 			rm ${LOCALE_ARCHIVE}
 			localedef -i en_US -f UTF-8 en_US.UTF-8
 			update-locale LANG=en_US.UTF-8
